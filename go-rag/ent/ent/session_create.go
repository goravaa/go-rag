// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/session"
	"go-rag/ent/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetSessionID sets the "session_id" field.
func (_c *SessionCreate) SetSessionID(v uuid.UUID) *SessionCreate {
	_c.mutation.SetSessionID(v)
	return _c
}

// SetSessionsUserids sets the "sessions_userids" field.
func (_c *SessionCreate) SetSessionsUserids(v uuid.UUID) *SessionCreate {
	_c.mutation.SetSessionsUserids(v)
	return _c
}

// SetSessionType sets the "session_type" field.
func (_c *SessionCreate) SetSessionType(v session.SessionType) *SessionCreate {
	_c.mutation.SetSessionType(v)
	return _c
}

// SetAccessToken sets the "access_token" field.
func (_c *SessionCreate) SetAccessToken(v string) *SessionCreate {
	_c.mutation.SetAccessToken(v)
	return _c
}

// SetRefreshToken sets the "refresh_token" field.
func (_c *SessionCreate) SetRefreshToken(v string) *SessionCreate {
	_c.mutation.SetRefreshToken(v)
	return _c
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_c *SessionCreate) SetNillableRefreshToken(v *string) *SessionCreate {
	if v != nil {
		_c.SetRefreshToken(*v)
	}
	return _c
}

// SetDeviceName sets the "device_name" field.
func (_c *SessionCreate) SetDeviceName(v string) *SessionCreate {
	_c.mutation.SetDeviceName(v)
	return _c
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_c *SessionCreate) SetNillableDeviceName(v *string) *SessionCreate {
	if v != nil {
		_c.SetDeviceName(*v)
	}
	return _c
}

// SetLastSyncTime sets the "last_sync_time" field.
func (_c *SessionCreate) SetLastSyncTime(v time.Time) *SessionCreate {
	_c.mutation.SetLastSyncTime(v)
	return _c
}

// SetNillableLastSyncTime sets the "last_sync_time" field if the given value is not nil.
func (_c *SessionCreate) SetNillableLastSyncTime(v *time.Time) *SessionCreate {
	if v != nil {
		_c.SetLastSyncTime(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SessionCreate) SetCreatedAt(v time.Time) *SessionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SessionCreate) SetNillableCreatedAt(v *time.Time) *SessionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *SessionCreate) SetExpiresAt(v time.Time) *SessionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetRevokedAt sets the "revoked_at" field.
func (_c *SessionCreate) SetRevokedAt(v time.Time) *SessionCreate {
	_c.mutation.SetRevokedAt(v)
	return _c
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_c *SessionCreate) SetNillableRevokedAt(v *time.Time) *SessionCreate {
	if v != nil {
		_c.SetRevokedAt(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *SessionCreate) SetIPAddress(v string) *SessionCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *SessionCreate) SetNillableIPAddress(v *string) *SessionCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *SessionCreate) SetUserAgent(v string) *SessionCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *SessionCreate) SetNillableUserAgent(v *string) *SessionCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *SessionCreate) SetMetadata(v map[string]interface{}) *SessionCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *SessionCreate) SetUserID(id uuid.UUID) *SessionCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *SessionCreate) SetUser(v *User) *SessionCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (_c *SessionCreate) Mutation() *SessionMutation {
	return _c.mutation
}

// Save creates the Session in the database.
func (_c *SessionCreate) Save(ctx context.Context) (*Session, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SessionCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SessionCreate) check() error {
	if _, ok := _c.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "Session.session_id"`)}
	}
	if _, ok := _c.mutation.SessionsUserids(); !ok {
		return &ValidationError{Name: "sessions_userids", err: errors.New(`ent: missing required field "Session.sessions_userids"`)}
	}
	if _, ok := _c.mutation.SessionType(); !ok {
		return &ValidationError{Name: "session_type", err: errors.New(`ent: missing required field "Session.session_type"`)}
	}
	if v, ok := _c.mutation.SessionType(); ok {
		if err := session.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Session.session_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "Session.access_token"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Session.created_at"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Session.expires_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Session.user"`)}
	}
	return nil
}

func (_c *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.SessionID(); ok {
		_spec.SetField(session.FieldSessionID, field.TypeUUID, value)
		_node.SessionID = value
	}
	if value, ok := _c.mutation.SessionType(); ok {
		_spec.SetField(session.FieldSessionType, field.TypeEnum, value)
		_node.SessionType = value
	}
	if value, ok := _c.mutation.AccessToken(); ok {
		_spec.SetField(session.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := _c.mutation.RefreshToken(); ok {
		_spec.SetField(session.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = &value
	}
	if value, ok := _c.mutation.DeviceName(); ok {
		_spec.SetField(session.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = &value
	}
	if value, ok := _c.mutation.LastSyncTime(); ok {
		_spec.SetField(session.FieldLastSyncTime, field.TypeTime, value)
		_node.LastSyncTime = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.RevokedAt(); ok {
		_spec.SetField(session.FieldRevokedAt, field.TypeTime, value)
		_node.RevokedAt = &value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(session.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SessionsUserids = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (_c *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Session, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
