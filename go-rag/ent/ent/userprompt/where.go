// Code generated by ent, DO NOT EDIT.

package userprompt

import (
	"go-rag/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLTE(FieldID, id))
}

// QueryText applies equality check predicate on the "query_text" field. It's identical to QueryTextEQ.
func QueryText(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldQueryText, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldCreatedAt, v))
}

// QueryTextEQ applies the EQ predicate on the "query_text" field.
func QueryTextEQ(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldQueryText, v))
}

// QueryTextNEQ applies the NEQ predicate on the "query_text" field.
func QueryTextNEQ(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNEQ(FieldQueryText, v))
}

// QueryTextIn applies the In predicate on the "query_text" field.
func QueryTextIn(vs ...string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldIn(FieldQueryText, vs...))
}

// QueryTextNotIn applies the NotIn predicate on the "query_text" field.
func QueryTextNotIn(vs ...string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNotIn(FieldQueryText, vs...))
}

// QueryTextGT applies the GT predicate on the "query_text" field.
func QueryTextGT(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGT(FieldQueryText, v))
}

// QueryTextGTE applies the GTE predicate on the "query_text" field.
func QueryTextGTE(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGTE(FieldQueryText, v))
}

// QueryTextLT applies the LT predicate on the "query_text" field.
func QueryTextLT(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLT(FieldQueryText, v))
}

// QueryTextLTE applies the LTE predicate on the "query_text" field.
func QueryTextLTE(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLTE(FieldQueryText, v))
}

// QueryTextContains applies the Contains predicate on the "query_text" field.
func QueryTextContains(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldContains(FieldQueryText, v))
}

// QueryTextHasPrefix applies the HasPrefix predicate on the "query_text" field.
func QueryTextHasPrefix(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldHasPrefix(FieldQueryText, v))
}

// QueryTextHasSuffix applies the HasSuffix predicate on the "query_text" field.
func QueryTextHasSuffix(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldHasSuffix(FieldQueryText, v))
}

// QueryTextEqualFold applies the EqualFold predicate on the "query_text" field.
func QueryTextEqualFold(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEqualFold(FieldQueryText, v))
}

// QueryTextContainsFold applies the ContainsFold predicate on the "query_text" field.
func QueryTextContainsFold(v string) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldContainsFold(FieldQueryText, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserPrompt {
	return predicate.UserPrompt(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResults applies the HasEdge predicate on the "results" edge.
func HasResults() predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResultsTable, ResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResultsWith applies the HasEdge predicate on the "results" edge with a given conditions (other predicates).
func HasResultsWith(preds ...predicate.QueryResult) predicate.UserPrompt {
	return predicate.UserPrompt(func(s *sql.Selector) {
		step := newResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPrompt) predicate.UserPrompt {
	return predicate.UserPrompt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPrompt) predicate.UserPrompt {
	return predicate.UserPrompt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPrompt) predicate.UserPrompt {
	return predicate.UserPrompt(sql.NotPredicates(p))
}
