// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/embedding"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/securityquestion"
	"go-rag/ent/ent/session"
	"go-rag/ent/ent/user"
	"go-rag/ent/ent/userprompt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChunk            = "Chunk"
	TypeDocument         = "Document"
	TypeEmbedding        = "Embedding"
	TypeProject          = "Project"
	TypeQueryResult      = "QueryResult"
	TypeSecurityQuestion = "SecurityQuestion"
	TypeSession          = "Session"
	TypeUser             = "User"
	TypeUserPrompt       = "UserPrompt"
)

// ChunkMutation represents an operation that mutates the Chunk nodes in the graph.
type ChunkMutation struct {
	config
	op                Op
	typ               string
	id                *int
	index             *int
	addindex          *int
	content           *string
	clearedFields     map[string]struct{}
	document          *int
	cleareddocument   bool
	embeddings        map[int]struct{}
	removedembeddings map[int]struct{}
	clearedembeddings bool
	done              bool
	oldValue          func(context.Context) (*Chunk, error)
	predicates        []predicate.Chunk
}

var _ ent.Mutation = (*ChunkMutation)(nil)

// chunkOption allows management of the mutation configuration using functional options.
type chunkOption func(*ChunkMutation)

// newChunkMutation creates new mutation for the Chunk entity.
func newChunkMutation(c config, op Op, opts ...chunkOption) *ChunkMutation {
	m := &ChunkMutation{
		config:        c,
		op:            op,
		typ:           TypeChunk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChunkID sets the ID field of the mutation.
func withChunkID(id int) chunkOption {
	return func(m *ChunkMutation) {
		var (
			err   error
			once  sync.Once
			value *Chunk
		)
		m.oldValue = func(ctx context.Context) (*Chunk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chunk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChunk sets the old Chunk of the mutation.
func withChunk(node *Chunk) chunkOption {
	return func(m *ChunkMutation) {
		m.oldValue = func(context.Context) (*Chunk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChunkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChunkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChunkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChunkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chunk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndex sets the "index" field.
func (m *ChunkMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *ChunkMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Chunk entity.
// If the Chunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunkMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *ChunkMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *ChunkMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *ChunkMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetContent sets the "content" field.
func (m *ChunkMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ChunkMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Chunk entity.
// If the Chunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunkMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ChunkMutation) ResetContent() {
	m.content = nil
}

// SetDocumentID sets the "document" edge to the Document entity by id.
func (m *ChunkMutation) SetDocumentID(id int) {
	m.document = &id
}

// ClearDocument clears the "document" edge to the Document entity.
func (m *ChunkMutation) ClearDocument() {
	m.cleareddocument = true
}

// DocumentCleared reports if the "document" edge to the Document entity was cleared.
func (m *ChunkMutation) DocumentCleared() bool {
	return m.cleareddocument
}

// DocumentID returns the "document" edge ID in the mutation.
func (m *ChunkMutation) DocumentID() (id int, exists bool) {
	if m.document != nil {
		return *m.document, true
	}
	return
}

// DocumentIDs returns the "document" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DocumentID instead. It exists only for internal usage by the builders.
func (m *ChunkMutation) DocumentIDs() (ids []int) {
	if id := m.document; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDocument resets all changes to the "document" edge.
func (m *ChunkMutation) ResetDocument() {
	m.document = nil
	m.cleareddocument = false
}

// AddEmbeddingIDs adds the "embeddings" edge to the Embedding entity by ids.
func (m *ChunkMutation) AddEmbeddingIDs(ids ...int) {
	if m.embeddings == nil {
		m.embeddings = make(map[int]struct{})
	}
	for i := range ids {
		m.embeddings[ids[i]] = struct{}{}
	}
}

// ClearEmbeddings clears the "embeddings" edge to the Embedding entity.
func (m *ChunkMutation) ClearEmbeddings() {
	m.clearedembeddings = true
}

// EmbeddingsCleared reports if the "embeddings" edge to the Embedding entity was cleared.
func (m *ChunkMutation) EmbeddingsCleared() bool {
	return m.clearedembeddings
}

// RemoveEmbeddingIDs removes the "embeddings" edge to the Embedding entity by IDs.
func (m *ChunkMutation) RemoveEmbeddingIDs(ids ...int) {
	if m.removedembeddings == nil {
		m.removedembeddings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.embeddings, ids[i])
		m.removedembeddings[ids[i]] = struct{}{}
	}
}

// RemovedEmbeddings returns the removed IDs of the "embeddings" edge to the Embedding entity.
func (m *ChunkMutation) RemovedEmbeddingsIDs() (ids []int) {
	for id := range m.removedembeddings {
		ids = append(ids, id)
	}
	return
}

// EmbeddingsIDs returns the "embeddings" edge IDs in the mutation.
func (m *ChunkMutation) EmbeddingsIDs() (ids []int) {
	for id := range m.embeddings {
		ids = append(ids, id)
	}
	return
}

// ResetEmbeddings resets all changes to the "embeddings" edge.
func (m *ChunkMutation) ResetEmbeddings() {
	m.embeddings = nil
	m.clearedembeddings = false
	m.removedembeddings = nil
}

// Where appends a list predicates to the ChunkMutation builder.
func (m *ChunkMutation) Where(ps ...predicate.Chunk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChunkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChunkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chunk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChunkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChunkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chunk).
func (m *ChunkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChunkMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.index != nil {
		fields = append(fields, chunk.FieldIndex)
	}
	if m.content != nil {
		fields = append(fields, chunk.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChunkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chunk.FieldIndex:
		return m.Index()
	case chunk.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChunkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chunk.FieldIndex:
		return m.OldIndex(ctx)
	case chunk.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Chunk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chunk.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case chunk.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Chunk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChunkMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, chunk.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChunkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chunk.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chunk.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Chunk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChunkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChunkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChunkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chunk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChunkMutation) ResetField(name string) error {
	switch name {
	case chunk.FieldIndex:
		m.ResetIndex()
		return nil
	case chunk.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Chunk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChunkMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.document != nil {
		edges = append(edges, chunk.EdgeDocument)
	}
	if m.embeddings != nil {
		edges = append(edges, chunk.EdgeEmbeddings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChunkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chunk.EdgeDocument:
		if id := m.document; id != nil {
			return []ent.Value{*id}
		}
	case chunk.EdgeEmbeddings:
		ids := make([]ent.Value, 0, len(m.embeddings))
		for id := range m.embeddings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChunkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedembeddings != nil {
		edges = append(edges, chunk.EdgeEmbeddings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChunkMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chunk.EdgeEmbeddings:
		ids := make([]ent.Value, 0, len(m.removedembeddings))
		for id := range m.removedembeddings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChunkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddocument {
		edges = append(edges, chunk.EdgeDocument)
	}
	if m.clearedembeddings {
		edges = append(edges, chunk.EdgeEmbeddings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChunkMutation) EdgeCleared(name string) bool {
	switch name {
	case chunk.EdgeDocument:
		return m.cleareddocument
	case chunk.EdgeEmbeddings:
		return m.clearedembeddings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChunkMutation) ClearEdge(name string) error {
	switch name {
	case chunk.EdgeDocument:
		m.ClearDocument()
		return nil
	}
	return fmt.Errorf("unknown Chunk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChunkMutation) ResetEdge(name string) error {
	switch name {
	case chunk.EdgeDocument:
		m.ResetDocument()
		return nil
	case chunk.EdgeEmbeddings:
		m.ResetEmbeddings()
		return nil
	}
	return fmt.Errorf("unknown Chunk edge %s", name)
}

// DocumentMutation represents an operation that mutates the Document nodes in the graph.
type DocumentMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	name                 *string
	storage_path         *string
	status               *string
	created_at           *time.Time
	clearedFields        map[string]struct{}
	project              *int
	clearedproject       bool
	chunks               map[int]struct{}
	removedchunks        map[int]struct{}
	clearedchunks        bool
	query_results        map[int]struct{}
	removedquery_results map[int]struct{}
	clearedquery_results bool
	done                 bool
	oldValue             func(context.Context) (*Document, error)
	predicates           []predicate.Document
}

var _ ent.Mutation = (*DocumentMutation)(nil)

// documentOption allows management of the mutation configuration using functional options.
type documentOption func(*DocumentMutation)

// newDocumentMutation creates new mutation for the Document entity.
func newDocumentMutation(c config, op Op, opts ...documentOption) *DocumentMutation {
	m := &DocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDocumentID sets the ID field of the mutation.
func withDocumentID(id int) documentOption {
	return func(m *DocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *Document
		)
		m.oldValue = func(ctx context.Context) (*Document, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Document.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDocument sets the old Document of the mutation.
func withDocument(node *Document) documentOption {
	return func(m *DocumentMutation) {
		m.oldValue = func(context.Context) (*Document, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Document.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DocumentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DocumentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DocumentMutation) ResetName() {
	m.name = nil
}

// SetStoragePath sets the "storage_path" field.
func (m *DocumentMutation) SetStoragePath(s string) {
	m.storage_path = &s
}

// StoragePath returns the value of the "storage_path" field in the mutation.
func (m *DocumentMutation) StoragePath() (r string, exists bool) {
	v := m.storage_path
	if v == nil {
		return
	}
	return *v, true
}

// OldStoragePath returns the old "storage_path" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldStoragePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoragePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoragePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoragePath: %w", err)
	}
	return oldValue.StoragePath, nil
}

// ResetStoragePath resets all changes to the "storage_path" field.
func (m *DocumentMutation) ResetStoragePath() {
	m.storage_path = nil
}

// SetStatus sets the "status" field.
func (m *DocumentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *DocumentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DocumentMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DocumentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DocumentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DocumentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *DocumentMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *DocumentMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *DocumentMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *DocumentMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *DocumentMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *DocumentMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by ids.
func (m *DocumentMutation) AddChunkIDs(ids ...int) {
	if m.chunks == nil {
		m.chunks = make(map[int]struct{})
	}
	for i := range ids {
		m.chunks[ids[i]] = struct{}{}
	}
}

// ClearChunks clears the "chunks" edge to the Chunk entity.
func (m *DocumentMutation) ClearChunks() {
	m.clearedchunks = true
}

// ChunksCleared reports if the "chunks" edge to the Chunk entity was cleared.
func (m *DocumentMutation) ChunksCleared() bool {
	return m.clearedchunks
}

// RemoveChunkIDs removes the "chunks" edge to the Chunk entity by IDs.
func (m *DocumentMutation) RemoveChunkIDs(ids ...int) {
	if m.removedchunks == nil {
		m.removedchunks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chunks, ids[i])
		m.removedchunks[ids[i]] = struct{}{}
	}
}

// RemovedChunks returns the removed IDs of the "chunks" edge to the Chunk entity.
func (m *DocumentMutation) RemovedChunksIDs() (ids []int) {
	for id := range m.removedchunks {
		ids = append(ids, id)
	}
	return
}

// ChunksIDs returns the "chunks" edge IDs in the mutation.
func (m *DocumentMutation) ChunksIDs() (ids []int) {
	for id := range m.chunks {
		ids = append(ids, id)
	}
	return
}

// ResetChunks resets all changes to the "chunks" edge.
func (m *DocumentMutation) ResetChunks() {
	m.chunks = nil
	m.clearedchunks = false
	m.removedchunks = nil
}

// AddQueryResultIDs adds the "query_results" edge to the QueryResult entity by ids.
func (m *DocumentMutation) AddQueryResultIDs(ids ...int) {
	if m.query_results == nil {
		m.query_results = make(map[int]struct{})
	}
	for i := range ids {
		m.query_results[ids[i]] = struct{}{}
	}
}

// ClearQueryResults clears the "query_results" edge to the QueryResult entity.
func (m *DocumentMutation) ClearQueryResults() {
	m.clearedquery_results = true
}

// QueryResultsCleared reports if the "query_results" edge to the QueryResult entity was cleared.
func (m *DocumentMutation) QueryResultsCleared() bool {
	return m.clearedquery_results
}

// RemoveQueryResultIDs removes the "query_results" edge to the QueryResult entity by IDs.
func (m *DocumentMutation) RemoveQueryResultIDs(ids ...int) {
	if m.removedquery_results == nil {
		m.removedquery_results = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.query_results, ids[i])
		m.removedquery_results[ids[i]] = struct{}{}
	}
}

// RemovedQueryResults returns the removed IDs of the "query_results" edge to the QueryResult entity.
func (m *DocumentMutation) RemovedQueryResultsIDs() (ids []int) {
	for id := range m.removedquery_results {
		ids = append(ids, id)
	}
	return
}

// QueryResultsIDs returns the "query_results" edge IDs in the mutation.
func (m *DocumentMutation) QueryResultsIDs() (ids []int) {
	for id := range m.query_results {
		ids = append(ids, id)
	}
	return
}

// ResetQueryResults resets all changes to the "query_results" edge.
func (m *DocumentMutation) ResetQueryResults() {
	m.query_results = nil
	m.clearedquery_results = false
	m.removedquery_results = nil
}

// Where appends a list predicates to the DocumentMutation builder.
func (m *DocumentMutation) Where(ps ...predicate.Document) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DocumentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DocumentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Document, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DocumentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DocumentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Document).
func (m *DocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DocumentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, document.FieldName)
	}
	if m.storage_path != nil {
		fields = append(fields, document.FieldStoragePath)
	}
	if m.status != nil {
		fields = append(fields, document.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, document.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DocumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case document.FieldName:
		return m.Name()
	case document.FieldStoragePath:
		return m.StoragePath()
	case document.FieldStatus:
		return m.Status()
	case document.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case document.FieldName:
		return m.OldName(ctx)
	case document.FieldStoragePath:
		return m.OldStoragePath(ctx)
	case document.FieldStatus:
		return m.OldStatus(ctx)
	case document.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Document field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case document.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case document.FieldStoragePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoragePath(v)
		return nil
	case document.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case document.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DocumentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DocumentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Document numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DocumentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DocumentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Document nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DocumentMutation) ResetField(name string) error {
	switch name {
	case document.FieldName:
		m.ResetName()
		return nil
	case document.FieldStoragePath:
		m.ResetStoragePath()
		return nil
	case document.FieldStatus:
		m.ResetStatus()
		return nil
	case document.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.project != nil {
		edges = append(edges, document.EdgeProject)
	}
	if m.chunks != nil {
		edges = append(edges, document.EdgeChunks)
	}
	if m.query_results != nil {
		edges = append(edges, document.EdgeQueryResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DocumentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case document.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case document.EdgeChunks:
		ids := make([]ent.Value, 0, len(m.chunks))
		for id := range m.chunks {
			ids = append(ids, id)
		}
		return ids
	case document.EdgeQueryResults:
		ids := make([]ent.Value, 0, len(m.query_results))
		for id := range m.query_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchunks != nil {
		edges = append(edges, document.EdgeChunks)
	}
	if m.removedquery_results != nil {
		edges = append(edges, document.EdgeQueryResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DocumentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case document.EdgeChunks:
		ids := make([]ent.Value, 0, len(m.removedchunks))
		for id := range m.removedchunks {
			ids = append(ids, id)
		}
		return ids
	case document.EdgeQueryResults:
		ids := make([]ent.Value, 0, len(m.removedquery_results))
		for id := range m.removedquery_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproject {
		edges = append(edges, document.EdgeProject)
	}
	if m.clearedchunks {
		edges = append(edges, document.EdgeChunks)
	}
	if m.clearedquery_results {
		edges = append(edges, document.EdgeQueryResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DocumentMutation) EdgeCleared(name string) bool {
	switch name {
	case document.EdgeProject:
		return m.clearedproject
	case document.EdgeChunks:
		return m.clearedchunks
	case document.EdgeQueryResults:
		return m.clearedquery_results
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DocumentMutation) ClearEdge(name string) error {
	switch name {
	case document.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Document unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DocumentMutation) ResetEdge(name string) error {
	switch name {
	case document.EdgeProject:
		m.ResetProject()
		return nil
	case document.EdgeChunks:
		m.ResetChunks()
		return nil
	case document.EdgeQueryResults:
		m.ResetQueryResults()
		return nil
	}
	return fmt.Errorf("unknown Document edge %s", name)
}

// EmbeddingMutation represents an operation that mutates the Embedding nodes in the graph.
type EmbeddingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	vector        *[]float32
	appendvector  []float32
	clearedFields map[string]struct{}
	chunk         *int
	clearedchunk  bool
	done          bool
	oldValue      func(context.Context) (*Embedding, error)
	predicates    []predicate.Embedding
}

var _ ent.Mutation = (*EmbeddingMutation)(nil)

// embeddingOption allows management of the mutation configuration using functional options.
type embeddingOption func(*EmbeddingMutation)

// newEmbeddingMutation creates new mutation for the Embedding entity.
func newEmbeddingMutation(c config, op Op, opts ...embeddingOption) *EmbeddingMutation {
	m := &EmbeddingMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbeddingID sets the ID field of the mutation.
func withEmbeddingID(id int) embeddingOption {
	return func(m *EmbeddingMutation) {
		var (
			err   error
			once  sync.Once
			value *Embedding
		)
		m.oldValue = func(ctx context.Context) (*Embedding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Embedding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedding sets the old Embedding of the mutation.
func withEmbedding(node *Embedding) embeddingOption {
	return func(m *EmbeddingMutation) {
		m.oldValue = func(context.Context) (*Embedding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbeddingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbeddingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmbeddingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmbeddingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Embedding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVector sets the "vector" field.
func (m *EmbeddingMutation) SetVector(f []float32) {
	m.vector = &f
	m.appendvector = nil
}

// Vector returns the value of the "vector" field in the mutation.
func (m *EmbeddingMutation) Vector() (r []float32, exists bool) {
	v := m.vector
	if v == nil {
		return
	}
	return *v, true
}

// OldVector returns the old "vector" field's value of the Embedding entity.
// If the Embedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbeddingMutation) OldVector(ctx context.Context) (v []float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVector: %w", err)
	}
	return oldValue.Vector, nil
}

// AppendVector adds f to the "vector" field.
func (m *EmbeddingMutation) AppendVector(f []float32) {
	m.appendvector = append(m.appendvector, f...)
}

// AppendedVector returns the list of values that were appended to the "vector" field in this mutation.
func (m *EmbeddingMutation) AppendedVector() ([]float32, bool) {
	if len(m.appendvector) == 0 {
		return nil, false
	}
	return m.appendvector, true
}

// ResetVector resets all changes to the "vector" field.
func (m *EmbeddingMutation) ResetVector() {
	m.vector = nil
	m.appendvector = nil
}

// SetChunkID sets the "chunk" edge to the Chunk entity by id.
func (m *EmbeddingMutation) SetChunkID(id int) {
	m.chunk = &id
}

// ClearChunk clears the "chunk" edge to the Chunk entity.
func (m *EmbeddingMutation) ClearChunk() {
	m.clearedchunk = true
}

// ChunkCleared reports if the "chunk" edge to the Chunk entity was cleared.
func (m *EmbeddingMutation) ChunkCleared() bool {
	return m.clearedchunk
}

// ChunkID returns the "chunk" edge ID in the mutation.
func (m *EmbeddingMutation) ChunkID() (id int, exists bool) {
	if m.chunk != nil {
		return *m.chunk, true
	}
	return
}

// ChunkIDs returns the "chunk" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChunkID instead. It exists only for internal usage by the builders.
func (m *EmbeddingMutation) ChunkIDs() (ids []int) {
	if id := m.chunk; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChunk resets all changes to the "chunk" edge.
func (m *EmbeddingMutation) ResetChunk() {
	m.chunk = nil
	m.clearedchunk = false
}

// Where appends a list predicates to the EmbeddingMutation builder.
func (m *EmbeddingMutation) Where(ps ...predicate.Embedding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmbeddingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmbeddingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Embedding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmbeddingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmbeddingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Embedding).
func (m *EmbeddingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbeddingMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.vector != nil {
		fields = append(fields, embedding.FieldVector)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbeddingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case embedding.FieldVector:
		return m.Vector()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbeddingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case embedding.FieldVector:
		return m.OldVector(ctx)
	}
	return nil, fmt.Errorf("unknown Embedding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbeddingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case embedding.FieldVector:
		v, ok := value.([]float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVector(v)
		return nil
	}
	return fmt.Errorf("unknown Embedding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbeddingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbeddingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbeddingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Embedding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbeddingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbeddingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbeddingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Embedding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbeddingMutation) ResetField(name string) error {
	switch name {
	case embedding.FieldVector:
		m.ResetVector()
		return nil
	}
	return fmt.Errorf("unknown Embedding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbeddingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chunk != nil {
		edges = append(edges, embedding.EdgeChunk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbeddingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case embedding.EdgeChunk:
		if id := m.chunk; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbeddingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbeddingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbeddingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchunk {
		edges = append(edges, embedding.EdgeChunk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbeddingMutation) EdgeCleared(name string) bool {
	switch name {
	case embedding.EdgeChunk:
		return m.clearedchunk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbeddingMutation) ClearEdge(name string) error {
	switch name {
	case embedding.EdgeChunk:
		m.ClearChunk()
		return nil
	}
	return fmt.Errorf("unknown Embedding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbeddingMutation) ResetEdge(name string) error {
	switch name {
	case embedding.EdgeChunk:
		m.ResetChunk()
		return nil
	}
	return fmt.Errorf("unknown Embedding edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	owner            *uuid.UUID
	clearedowner     bool
	documents        map[int]struct{}
	removeddocuments map[int]struct{}
	cleareddocuments bool
	queries          map[int]struct{}
	removedqueries   map[int]struct{}
	clearedqueries   bool
	done             bool
	oldValue         func(context.Context) (*Project, error)
	predicates       []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *ProjectMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *ProjectMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *ProjectMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ProjectMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ProjectMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddDocumentIDs adds the "documents" edge to the Document entity by ids.
func (m *ProjectMutation) AddDocumentIDs(ids ...int) {
	if m.documents == nil {
		m.documents = make(map[int]struct{})
	}
	for i := range ids {
		m.documents[ids[i]] = struct{}{}
	}
}

// ClearDocuments clears the "documents" edge to the Document entity.
func (m *ProjectMutation) ClearDocuments() {
	m.cleareddocuments = true
}

// DocumentsCleared reports if the "documents" edge to the Document entity was cleared.
func (m *ProjectMutation) DocumentsCleared() bool {
	return m.cleareddocuments
}

// RemoveDocumentIDs removes the "documents" edge to the Document entity by IDs.
func (m *ProjectMutation) RemoveDocumentIDs(ids ...int) {
	if m.removeddocuments == nil {
		m.removeddocuments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.documents, ids[i])
		m.removeddocuments[ids[i]] = struct{}{}
	}
}

// RemovedDocuments returns the removed IDs of the "documents" edge to the Document entity.
func (m *ProjectMutation) RemovedDocumentsIDs() (ids []int) {
	for id := range m.removeddocuments {
		ids = append(ids, id)
	}
	return
}

// DocumentsIDs returns the "documents" edge IDs in the mutation.
func (m *ProjectMutation) DocumentsIDs() (ids []int) {
	for id := range m.documents {
		ids = append(ids, id)
	}
	return
}

// ResetDocuments resets all changes to the "documents" edge.
func (m *ProjectMutation) ResetDocuments() {
	m.documents = nil
	m.cleareddocuments = false
	m.removeddocuments = nil
}

// AddQueryIDs adds the "queries" edge to the UserPrompt entity by ids.
func (m *ProjectMutation) AddQueryIDs(ids ...int) {
	if m.queries == nil {
		m.queries = make(map[int]struct{})
	}
	for i := range ids {
		m.queries[ids[i]] = struct{}{}
	}
}

// ClearQueries clears the "queries" edge to the UserPrompt entity.
func (m *ProjectMutation) ClearQueries() {
	m.clearedqueries = true
}

// QueriesCleared reports if the "queries" edge to the UserPrompt entity was cleared.
func (m *ProjectMutation) QueriesCleared() bool {
	return m.clearedqueries
}

// RemoveQueryIDs removes the "queries" edge to the UserPrompt entity by IDs.
func (m *ProjectMutation) RemoveQueryIDs(ids ...int) {
	if m.removedqueries == nil {
		m.removedqueries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.queries, ids[i])
		m.removedqueries[ids[i]] = struct{}{}
	}
}

// RemovedQueries returns the removed IDs of the "queries" edge to the UserPrompt entity.
func (m *ProjectMutation) RemovedQueriesIDs() (ids []int) {
	for id := range m.removedqueries {
		ids = append(ids, id)
	}
	return
}

// QueriesIDs returns the "queries" edge IDs in the mutation.
func (m *ProjectMutation) QueriesIDs() (ids []int) {
	for id := range m.queries {
		ids = append(ids, id)
	}
	return
}

// ResetQueries resets all changes to the "queries" edge.
func (m *ProjectMutation) ResetQueries() {
	m.queries = nil
	m.clearedqueries = false
	m.removedqueries = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldDescription:
		return m.Description()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, project.EdgeOwner)
	}
	if m.documents != nil {
		edges = append(edges, project.EdgeDocuments)
	}
	if m.queries != nil {
		edges = append(edges, project.EdgeQueries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.documents))
		for id := range m.documents {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.queries))
		for id := range m.queries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddocuments != nil {
		edges = append(edges, project.EdgeDocuments)
	}
	if m.removedqueries != nil {
		edges = append(edges, project.EdgeQueries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.removeddocuments))
		for id := range m.removeddocuments {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.removedqueries))
		for id := range m.removedqueries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, project.EdgeOwner)
	}
	if m.cleareddocuments {
		edges = append(edges, project.EdgeDocuments)
	}
	if m.clearedqueries {
		edges = append(edges, project.EdgeQueries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeOwner:
		return m.clearedowner
	case project.EdgeDocuments:
		return m.cleareddocuments
	case project.EdgeQueries:
		return m.clearedqueries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeOwner:
		m.ResetOwner()
		return nil
	case project.EdgeDocuments:
		m.ResetDocuments()
		return nil
	case project.EdgeQueries:
		m.ResetQueries()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// QueryResultMutation represents an operation that mutates the QueryResult nodes in the graph.
type QueryResultMutation struct {
	config
	op              Op
	typ             string
	id              *int
	rank            *int
	addrank         *int
	score           *float64
	addscore        *float64
	content_snippet *string
	clearedFields   map[string]struct{}
	query           *int
	clearedquery    bool
	document        *int
	cleareddocument bool
	done            bool
	oldValue        func(context.Context) (*QueryResult, error)
	predicates      []predicate.QueryResult
}

var _ ent.Mutation = (*QueryResultMutation)(nil)

// queryresultOption allows management of the mutation configuration using functional options.
type queryresultOption func(*QueryResultMutation)

// newQueryResultMutation creates new mutation for the QueryResult entity.
func newQueryResultMutation(c config, op Op, opts ...queryresultOption) *QueryResultMutation {
	m := &QueryResultMutation{
		config:        c,
		op:            op,
		typ:           TypeQueryResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueryResultID sets the ID field of the mutation.
func withQueryResultID(id int) queryresultOption {
	return func(m *QueryResultMutation) {
		var (
			err   error
			once  sync.Once
			value *QueryResult
		)
		m.oldValue = func(ctx context.Context) (*QueryResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QueryResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueryResult sets the old QueryResult of the mutation.
func withQueryResult(node *QueryResult) queryresultOption {
	return func(m *QueryResultMutation) {
		m.oldValue = func(context.Context) (*QueryResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueryResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueryResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QueryResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QueryResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QueryResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRank sets the "rank" field.
func (m *QueryResultMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *QueryResultMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the QueryResult entity.
// If the QueryResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryResultMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *QueryResultMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *QueryResultMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *QueryResultMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetScore sets the "score" field.
func (m *QueryResultMutation) SetScore(f float64) {
	m.score = &f
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *QueryResultMutation) Score() (r float64, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the QueryResult entity.
// If the QueryResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryResultMutation) OldScore(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds f to the "score" field.
func (m *QueryResultMutation) AddScore(f float64) {
	if m.addscore != nil {
		*m.addscore += f
	} else {
		m.addscore = &f
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *QueryResultMutation) AddedScore() (r float64, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *QueryResultMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetContentSnippet sets the "content_snippet" field.
func (m *QueryResultMutation) SetContentSnippet(s string) {
	m.content_snippet = &s
}

// ContentSnippet returns the value of the "content_snippet" field in the mutation.
func (m *QueryResultMutation) ContentSnippet() (r string, exists bool) {
	v := m.content_snippet
	if v == nil {
		return
	}
	return *v, true
}

// OldContentSnippet returns the old "content_snippet" field's value of the QueryResult entity.
// If the QueryResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueryResultMutation) OldContentSnippet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentSnippet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentSnippet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentSnippet: %w", err)
	}
	return oldValue.ContentSnippet, nil
}

// ResetContentSnippet resets all changes to the "content_snippet" field.
func (m *QueryResultMutation) ResetContentSnippet() {
	m.content_snippet = nil
}

// SetQueryID sets the "query" edge to the UserPrompt entity by id.
func (m *QueryResultMutation) SetQueryID(id int) {
	m.query = &id
}

// ClearQuery clears the "query" edge to the UserPrompt entity.
func (m *QueryResultMutation) ClearQuery() {
	m.clearedquery = true
}

// QueryCleared reports if the "query" edge to the UserPrompt entity was cleared.
func (m *QueryResultMutation) QueryCleared() bool {
	return m.clearedquery
}

// QueryID returns the "query" edge ID in the mutation.
func (m *QueryResultMutation) QueryID() (id int, exists bool) {
	if m.query != nil {
		return *m.query, true
	}
	return
}

// QueryIDs returns the "query" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QueryID instead. It exists only for internal usage by the builders.
func (m *QueryResultMutation) QueryIDs() (ids []int) {
	if id := m.query; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuery resets all changes to the "query" edge.
func (m *QueryResultMutation) ResetQuery() {
	m.query = nil
	m.clearedquery = false
}

// SetDocumentID sets the "document" edge to the Document entity by id.
func (m *QueryResultMutation) SetDocumentID(id int) {
	m.document = &id
}

// ClearDocument clears the "document" edge to the Document entity.
func (m *QueryResultMutation) ClearDocument() {
	m.cleareddocument = true
}

// DocumentCleared reports if the "document" edge to the Document entity was cleared.
func (m *QueryResultMutation) DocumentCleared() bool {
	return m.cleareddocument
}

// DocumentID returns the "document" edge ID in the mutation.
func (m *QueryResultMutation) DocumentID() (id int, exists bool) {
	if m.document != nil {
		return *m.document, true
	}
	return
}

// DocumentIDs returns the "document" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DocumentID instead. It exists only for internal usage by the builders.
func (m *QueryResultMutation) DocumentIDs() (ids []int) {
	if id := m.document; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDocument resets all changes to the "document" edge.
func (m *QueryResultMutation) ResetDocument() {
	m.document = nil
	m.cleareddocument = false
}

// Where appends a list predicates to the QueryResultMutation builder.
func (m *QueryResultMutation) Where(ps ...predicate.QueryResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QueryResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QueryResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QueryResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QueryResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QueryResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QueryResult).
func (m *QueryResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QueryResultMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.rank != nil {
		fields = append(fields, queryresult.FieldRank)
	}
	if m.score != nil {
		fields = append(fields, queryresult.FieldScore)
	}
	if m.content_snippet != nil {
		fields = append(fields, queryresult.FieldContentSnippet)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QueryResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case queryresult.FieldRank:
		return m.Rank()
	case queryresult.FieldScore:
		return m.Score()
	case queryresult.FieldContentSnippet:
		return m.ContentSnippet()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QueryResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case queryresult.FieldRank:
		return m.OldRank(ctx)
	case queryresult.FieldScore:
		return m.OldScore(ctx)
	case queryresult.FieldContentSnippet:
		return m.OldContentSnippet(ctx)
	}
	return nil, fmt.Errorf("unknown QueryResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case queryresult.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case queryresult.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case queryresult.FieldContentSnippet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentSnippet(v)
		return nil
	}
	return fmt.Errorf("unknown QueryResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QueryResultMutation) AddedFields() []string {
	var fields []string
	if m.addrank != nil {
		fields = append(fields, queryresult.FieldRank)
	}
	if m.addscore != nil {
		fields = append(fields, queryresult.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QueryResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case queryresult.FieldRank:
		return m.AddedRank()
	case queryresult.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueryResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case queryresult.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case queryresult.FieldScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown QueryResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QueryResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QueryResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueryResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QueryResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QueryResultMutation) ResetField(name string) error {
	switch name {
	case queryresult.FieldRank:
		m.ResetRank()
		return nil
	case queryresult.FieldScore:
		m.ResetScore()
		return nil
	case queryresult.FieldContentSnippet:
		m.ResetContentSnippet()
		return nil
	}
	return fmt.Errorf("unknown QueryResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QueryResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.query != nil {
		edges = append(edges, queryresult.EdgeQuery)
	}
	if m.document != nil {
		edges = append(edges, queryresult.EdgeDocument)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QueryResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case queryresult.EdgeQuery:
		if id := m.query; id != nil {
			return []ent.Value{*id}
		}
	case queryresult.EdgeDocument:
		if id := m.document; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QueryResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QueryResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QueryResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquery {
		edges = append(edges, queryresult.EdgeQuery)
	}
	if m.cleareddocument {
		edges = append(edges, queryresult.EdgeDocument)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QueryResultMutation) EdgeCleared(name string) bool {
	switch name {
	case queryresult.EdgeQuery:
		return m.clearedquery
	case queryresult.EdgeDocument:
		return m.cleareddocument
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QueryResultMutation) ClearEdge(name string) error {
	switch name {
	case queryresult.EdgeQuery:
		m.ClearQuery()
		return nil
	case queryresult.EdgeDocument:
		m.ClearDocument()
		return nil
	}
	return fmt.Errorf("unknown QueryResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QueryResultMutation) ResetEdge(name string) error {
	switch name {
	case queryresult.EdgeQuery:
		m.ResetQuery()
		return nil
	case queryresult.EdgeDocument:
		m.ResetDocument()
		return nil
	}
	return fmt.Errorf("unknown QueryResult edge %s", name)
}

// SecurityQuestionMutation represents an operation that mutates the SecurityQuestion nodes in the graph.
type SecurityQuestionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	question      *string
	answer        *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*SecurityQuestion, error)
	predicates    []predicate.SecurityQuestion
}

var _ ent.Mutation = (*SecurityQuestionMutation)(nil)

// securityquestionOption allows management of the mutation configuration using functional options.
type securityquestionOption func(*SecurityQuestionMutation)

// newSecurityQuestionMutation creates new mutation for the SecurityQuestion entity.
func newSecurityQuestionMutation(c config, op Op, opts ...securityquestionOption) *SecurityQuestionMutation {
	m := &SecurityQuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeSecurityQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSecurityQuestionID sets the ID field of the mutation.
func withSecurityQuestionID(id uuid.UUID) securityquestionOption {
	return func(m *SecurityQuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *SecurityQuestion
		)
		m.oldValue = func(ctx context.Context) (*SecurityQuestion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SecurityQuestion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSecurityQuestion sets the old SecurityQuestion of the mutation.
func withSecurityQuestion(node *SecurityQuestion) securityquestionOption {
	return func(m *SecurityQuestionMutation) {
		m.oldValue = func(context.Context) (*SecurityQuestion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SecurityQuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SecurityQuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SecurityQuestion entities.
func (m *SecurityQuestionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SecurityQuestionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SecurityQuestionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SecurityQuestion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuestion sets the "question" field.
func (m *SecurityQuestionMutation) SetQuestion(s string) {
	m.question = &s
}

// Question returns the value of the "question" field in the mutation.
func (m *SecurityQuestionMutation) Question() (r string, exists bool) {
	v := m.question
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestion returns the old "question" field's value of the SecurityQuestion entity.
// If the SecurityQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecurityQuestionMutation) OldQuestion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestion: %w", err)
	}
	return oldValue.Question, nil
}

// ResetQuestion resets all changes to the "question" field.
func (m *SecurityQuestionMutation) ResetQuestion() {
	m.question = nil
}

// SetAnswer sets the "answer" field.
func (m *SecurityQuestionMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *SecurityQuestionMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the SecurityQuestion entity.
// If the SecurityQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecurityQuestionMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *SecurityQuestionMutation) ResetAnswer() {
	m.answer = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SecurityQuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SecurityQuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SecurityQuestion entity.
// If the SecurityQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecurityQuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SecurityQuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SecurityQuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SecurityQuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SecurityQuestion entity.
// If the SecurityQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SecurityQuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SecurityQuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SecurityQuestionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SecurityQuestionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SecurityQuestionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SecurityQuestionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SecurityQuestionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SecurityQuestionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SecurityQuestionMutation builder.
func (m *SecurityQuestionMutation) Where(ps ...predicate.SecurityQuestion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SecurityQuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SecurityQuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SecurityQuestion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SecurityQuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SecurityQuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SecurityQuestion).
func (m *SecurityQuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SecurityQuestionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.question != nil {
		fields = append(fields, securityquestion.FieldQuestion)
	}
	if m.answer != nil {
		fields = append(fields, securityquestion.FieldAnswer)
	}
	if m.created_at != nil {
		fields = append(fields, securityquestion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, securityquestion.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SecurityQuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case securityquestion.FieldQuestion:
		return m.Question()
	case securityquestion.FieldAnswer:
		return m.Answer()
	case securityquestion.FieldCreatedAt:
		return m.CreatedAt()
	case securityquestion.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SecurityQuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case securityquestion.FieldQuestion:
		return m.OldQuestion(ctx)
	case securityquestion.FieldAnswer:
		return m.OldAnswer(ctx)
	case securityquestion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case securityquestion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SecurityQuestion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecurityQuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case securityquestion.FieldQuestion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestion(v)
		return nil
	case securityquestion.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	case securityquestion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case securityquestion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SecurityQuestion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SecurityQuestionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SecurityQuestionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SecurityQuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SecurityQuestion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SecurityQuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SecurityQuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SecurityQuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SecurityQuestion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SecurityQuestionMutation) ResetField(name string) error {
	switch name {
	case securityquestion.FieldQuestion:
		m.ResetQuestion()
		return nil
	case securityquestion.FieldAnswer:
		m.ResetAnswer()
		return nil
	case securityquestion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case securityquestion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SecurityQuestion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SecurityQuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, securityquestion.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SecurityQuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case securityquestion.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SecurityQuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SecurityQuestionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SecurityQuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, securityquestion.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SecurityQuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case securityquestion.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SecurityQuestionMutation) ClearEdge(name string) error {
	switch name {
	case securityquestion.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown SecurityQuestion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SecurityQuestionMutation) ResetEdge(name string) error {
	switch name {
	case securityquestion.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown SecurityQuestion edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op             Op
	typ            string
	id             *int
	session_id     *uuid.UUID
	session_type   *session.SessionType
	access_token   *string
	refresh_token  *string
	device_name    *string
	last_sync_time *time.Time
	created_at     *time.Time
	expires_at     *time.Time
	revoked_at     *time.Time
	ip_address     *string
	user_agent     *string
	metadata       *map[string]interface{}
	clearedFields  map[string]struct{}
	user           *uuid.UUID
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Session, error)
	predicates     []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSessionID sets the "session_id" field.
func (m *SessionMutation) SetSessionID(u uuid.UUID) {
	m.session_id = &u
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *SessionMutation) SessionID() (r uuid.UUID, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *SessionMutation) ResetSessionID() {
	m.session_id = nil
}

// SetSessionsUserids sets the "sessions_userids" field.
func (m *SessionMutation) SetSessionsUserids(u uuid.UUID) {
	m.user = &u
}

// SessionsUserids returns the value of the "sessions_userids" field in the mutation.
func (m *SessionMutation) SessionsUserids() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionsUserids returns the old "sessions_userids" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionsUserids(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionsUserids is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionsUserids requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionsUserids: %w", err)
	}
	return oldValue.SessionsUserids, nil
}

// ResetSessionsUserids resets all changes to the "sessions_userids" field.
func (m *SessionMutation) ResetSessionsUserids() {
	m.user = nil
}

// SetSessionType sets the "session_type" field.
func (m *SessionMutation) SetSessionType(st session.SessionType) {
	m.session_type = &st
}

// SessionType returns the value of the "session_type" field in the mutation.
func (m *SessionMutation) SessionType() (r session.SessionType, exists bool) {
	v := m.session_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionType returns the old "session_type" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionType(ctx context.Context) (v session.SessionType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionType: %w", err)
	}
	return oldValue.SessionType, nil
}

// ResetSessionType resets all changes to the "session_type" field.
func (m *SessionMutation) ResetSessionType() {
	m.session_type = nil
}

// SetAccessToken sets the "access_token" field.
func (m *SessionMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *SessionMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *SessionMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *SessionMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *SessionMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldRefreshToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (m *SessionMutation) ClearRefreshToken() {
	m.refresh_token = nil
	m.clearedFields[session.FieldRefreshToken] = struct{}{}
}

// RefreshTokenCleared returns if the "refresh_token" field was cleared in this mutation.
func (m *SessionMutation) RefreshTokenCleared() bool {
	_, ok := m.clearedFields[session.FieldRefreshToken]
	return ok
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *SessionMutation) ResetRefreshToken() {
	m.refresh_token = nil
	delete(m.clearedFields, session.FieldRefreshToken)
}

// SetDeviceName sets the "device_name" field.
func (m *SessionMutation) SetDeviceName(s string) {
	m.device_name = &s
}

// DeviceName returns the value of the "device_name" field in the mutation.
func (m *SessionMutation) DeviceName() (r string, exists bool) {
	v := m.device_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceName returns the old "device_name" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldDeviceName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceName: %w", err)
	}
	return oldValue.DeviceName, nil
}

// ClearDeviceName clears the value of the "device_name" field.
func (m *SessionMutation) ClearDeviceName() {
	m.device_name = nil
	m.clearedFields[session.FieldDeviceName] = struct{}{}
}

// DeviceNameCleared returns if the "device_name" field was cleared in this mutation.
func (m *SessionMutation) DeviceNameCleared() bool {
	_, ok := m.clearedFields[session.FieldDeviceName]
	return ok
}

// ResetDeviceName resets all changes to the "device_name" field.
func (m *SessionMutation) ResetDeviceName() {
	m.device_name = nil
	delete(m.clearedFields, session.FieldDeviceName)
}

// SetLastSyncTime sets the "last_sync_time" field.
func (m *SessionMutation) SetLastSyncTime(t time.Time) {
	m.last_sync_time = &t
}

// LastSyncTime returns the value of the "last_sync_time" field in the mutation.
func (m *SessionMutation) LastSyncTime() (r time.Time, exists bool) {
	v := m.last_sync_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSyncTime returns the old "last_sync_time" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldLastSyncTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSyncTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSyncTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSyncTime: %w", err)
	}
	return oldValue.LastSyncTime, nil
}

// ClearLastSyncTime clears the value of the "last_sync_time" field.
func (m *SessionMutation) ClearLastSyncTime() {
	m.last_sync_time = nil
	m.clearedFields[session.FieldLastSyncTime] = struct{}{}
}

// LastSyncTimeCleared returns if the "last_sync_time" field was cleared in this mutation.
func (m *SessionMutation) LastSyncTimeCleared() bool {
	_, ok := m.clearedFields[session.FieldLastSyncTime]
	return ok
}

// ResetLastSyncTime resets all changes to the "last_sync_time" field.
func (m *SessionMutation) ResetLastSyncTime() {
	m.last_sync_time = nil
	delete(m.clearedFields, session.FieldLastSyncTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *SessionMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SessionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SessionMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetRevokedAt sets the "revoked_at" field.
func (m *SessionMutation) SetRevokedAt(t time.Time) {
	m.revoked_at = &t
}

// RevokedAt returns the value of the "revoked_at" field in the mutation.
func (m *SessionMutation) RevokedAt() (r time.Time, exists bool) {
	v := m.revoked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRevokedAt returns the old "revoked_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldRevokedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevokedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevokedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevokedAt: %w", err)
	}
	return oldValue.RevokedAt, nil
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (m *SessionMutation) ClearRevokedAt() {
	m.revoked_at = nil
	m.clearedFields[session.FieldRevokedAt] = struct{}{}
}

// RevokedAtCleared returns if the "revoked_at" field was cleared in this mutation.
func (m *SessionMutation) RevokedAtCleared() bool {
	_, ok := m.clearedFields[session.FieldRevokedAt]
	return ok
}

// ResetRevokedAt resets all changes to the "revoked_at" field.
func (m *SessionMutation) ResetRevokedAt() {
	m.revoked_at = nil
	delete(m.clearedFields, session.FieldRevokedAt)
}

// SetIPAddress sets the "ip_address" field.
func (m *SessionMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *SessionMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIPAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ClearIPAddress clears the value of the "ip_address" field.
func (m *SessionMutation) ClearIPAddress() {
	m.ip_address = nil
	m.clearedFields[session.FieldIPAddress] = struct{}{}
}

// IPAddressCleared returns if the "ip_address" field was cleared in this mutation.
func (m *SessionMutation) IPAddressCleared() bool {
	_, ok := m.clearedFields[session.FieldIPAddress]
	return ok
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *SessionMutation) ResetIPAddress() {
	m.ip_address = nil
	delete(m.clearedFields, session.FieldIPAddress)
}

// SetUserAgent sets the "user_agent" field.
func (m *SessionMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *SessionMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserAgent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *SessionMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[session.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *SessionMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[session.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *SessionMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, session.FieldUserAgent)
}

// SetMetadata sets the "metadata" field.
func (m *SessionMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SessionMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SessionMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[session.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SessionMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[session.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SessionMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, session.FieldMetadata)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[session.FieldSessionsUserids] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.session_id != nil {
		fields = append(fields, session.FieldSessionID)
	}
	if m.user != nil {
		fields = append(fields, session.FieldSessionsUserids)
	}
	if m.session_type != nil {
		fields = append(fields, session.FieldSessionType)
	}
	if m.access_token != nil {
		fields = append(fields, session.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, session.FieldRefreshToken)
	}
	if m.device_name != nil {
		fields = append(fields, session.FieldDeviceName)
	}
	if m.last_sync_time != nil {
		fields = append(fields, session.FieldLastSyncTime)
	}
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.expires_at != nil {
		fields = append(fields, session.FieldExpiresAt)
	}
	if m.revoked_at != nil {
		fields = append(fields, session.FieldRevokedAt)
	}
	if m.ip_address != nil {
		fields = append(fields, session.FieldIPAddress)
	}
	if m.user_agent != nil {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.metadata != nil {
		fields = append(fields, session.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldSessionID:
		return m.SessionID()
	case session.FieldSessionsUserids:
		return m.SessionsUserids()
	case session.FieldSessionType:
		return m.SessionType()
	case session.FieldAccessToken:
		return m.AccessToken()
	case session.FieldRefreshToken:
		return m.RefreshToken()
	case session.FieldDeviceName:
		return m.DeviceName()
	case session.FieldLastSyncTime:
		return m.LastSyncTime()
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldExpiresAt:
		return m.ExpiresAt()
	case session.FieldRevokedAt:
		return m.RevokedAt()
	case session.FieldIPAddress:
		return m.IPAddress()
	case session.FieldUserAgent:
		return m.UserAgent()
	case session.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldSessionID:
		return m.OldSessionID(ctx)
	case session.FieldSessionsUserids:
		return m.OldSessionsUserids(ctx)
	case session.FieldSessionType:
		return m.OldSessionType(ctx)
	case session.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case session.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case session.FieldDeviceName:
		return m.OldDeviceName(ctx)
	case session.FieldLastSyncTime:
		return m.OldLastSyncTime(ctx)
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case session.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case session.FieldRevokedAt:
		return m.OldRevokedAt(ctx)
	case session.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case session.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case session.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldSessionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case session.FieldSessionsUserids:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionsUserids(v)
		return nil
	case session.FieldSessionType:
		v, ok := value.(session.SessionType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionType(v)
		return nil
	case session.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case session.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case session.FieldDeviceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceName(v)
		return nil
	case session.FieldLastSyncTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSyncTime(v)
		return nil
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case session.FieldRevokedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevokedAt(v)
		return nil
	case session.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case session.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case session.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldRefreshToken) {
		fields = append(fields, session.FieldRefreshToken)
	}
	if m.FieldCleared(session.FieldDeviceName) {
		fields = append(fields, session.FieldDeviceName)
	}
	if m.FieldCleared(session.FieldLastSyncTime) {
		fields = append(fields, session.FieldLastSyncTime)
	}
	if m.FieldCleared(session.FieldRevokedAt) {
		fields = append(fields, session.FieldRevokedAt)
	}
	if m.FieldCleared(session.FieldIPAddress) {
		fields = append(fields, session.FieldIPAddress)
	}
	if m.FieldCleared(session.FieldUserAgent) {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.FieldCleared(session.FieldMetadata) {
		fields = append(fields, session.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldRefreshToken:
		m.ClearRefreshToken()
		return nil
	case session.FieldDeviceName:
		m.ClearDeviceName()
		return nil
	case session.FieldLastSyncTime:
		m.ClearLastSyncTime()
		return nil
	case session.FieldRevokedAt:
		m.ClearRevokedAt()
		return nil
	case session.FieldIPAddress:
		m.ClearIPAddress()
		return nil
	case session.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case session.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldSessionID:
		m.ResetSessionID()
		return nil
	case session.FieldSessionsUserids:
		m.ResetSessionsUserids()
		return nil
	case session.FieldSessionType:
		m.ResetSessionType()
		return nil
	case session.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case session.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case session.FieldDeviceName:
		m.ResetDeviceName()
		return nil
	case session.FieldLastSyncTime:
		m.ResetLastSyncTime()
		return nil
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case session.FieldRevokedAt:
		m.ResetRevokedAt()
		return nil
	case session.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case session.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case session.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	email                     *string
	password_hash             *string
	email_confirmed           *bool
	created_at                *time.Time
	clearedFields             map[string]struct{}
	projects                  map[int]struct{}
	removedprojects           map[int]struct{}
	clearedprojects           bool
	queries                   map[int]struct{}
	removedqueries            map[int]struct{}
	clearedqueries            bool
	sessions                  map[int]struct{}
	removedsessions           map[int]struct{}
	clearedsessions           bool
	security_questions        map[uuid.UUID]struct{}
	removedsecurity_questions map[uuid.UUID]struct{}
	clearedsecurity_questions bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (m *UserMutation) SetEmailConfirmed(b bool) {
	m.email_confirmed = &b
}

// EmailConfirmed returns the value of the "email_confirmed" field in the mutation.
func (m *UserMutation) EmailConfirmed() (r bool, exists bool) {
	v := m.email_confirmed
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailConfirmed returns the old "email_confirmed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailConfirmed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailConfirmed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailConfirmed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailConfirmed: %w", err)
	}
	return oldValue.EmailConfirmed, nil
}

// ResetEmailConfirmed resets all changes to the "email_confirmed" field.
func (m *UserMutation) ResetEmailConfirmed() {
	m.email_confirmed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *UserMutation) AddProjectIDs(ids ...int) {
	if m.projects == nil {
		m.projects = make(map[int]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *UserMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *UserMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *UserMutation) RemoveProjectIDs(ids ...int) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *UserMutation) RemovedProjectsIDs() (ids []int) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *UserMutation) ProjectsIDs() (ids []int) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *UserMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddQueryIDs adds the "queries" edge to the UserPrompt entity by ids.
func (m *UserMutation) AddQueryIDs(ids ...int) {
	if m.queries == nil {
		m.queries = make(map[int]struct{})
	}
	for i := range ids {
		m.queries[ids[i]] = struct{}{}
	}
}

// ClearQueries clears the "queries" edge to the UserPrompt entity.
func (m *UserMutation) ClearQueries() {
	m.clearedqueries = true
}

// QueriesCleared reports if the "queries" edge to the UserPrompt entity was cleared.
func (m *UserMutation) QueriesCleared() bool {
	return m.clearedqueries
}

// RemoveQueryIDs removes the "queries" edge to the UserPrompt entity by IDs.
func (m *UserMutation) RemoveQueryIDs(ids ...int) {
	if m.removedqueries == nil {
		m.removedqueries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.queries, ids[i])
		m.removedqueries[ids[i]] = struct{}{}
	}
}

// RemovedQueries returns the removed IDs of the "queries" edge to the UserPrompt entity.
func (m *UserMutation) RemovedQueriesIDs() (ids []int) {
	for id := range m.removedqueries {
		ids = append(ids, id)
	}
	return
}

// QueriesIDs returns the "queries" edge IDs in the mutation.
func (m *UserMutation) QueriesIDs() (ids []int) {
	for id := range m.queries {
		ids = append(ids, id)
	}
	return
}

// ResetQueries resets all changes to the "queries" edge.
func (m *UserMutation) ResetQueries() {
	m.queries = nil
	m.clearedqueries = false
	m.removedqueries = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddSecurityQuestionIDs adds the "security_questions" edge to the SecurityQuestion entity by ids.
func (m *UserMutation) AddSecurityQuestionIDs(ids ...uuid.UUID) {
	if m.security_questions == nil {
		m.security_questions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.security_questions[ids[i]] = struct{}{}
	}
}

// ClearSecurityQuestions clears the "security_questions" edge to the SecurityQuestion entity.
func (m *UserMutation) ClearSecurityQuestions() {
	m.clearedsecurity_questions = true
}

// SecurityQuestionsCleared reports if the "security_questions" edge to the SecurityQuestion entity was cleared.
func (m *UserMutation) SecurityQuestionsCleared() bool {
	return m.clearedsecurity_questions
}

// RemoveSecurityQuestionIDs removes the "security_questions" edge to the SecurityQuestion entity by IDs.
func (m *UserMutation) RemoveSecurityQuestionIDs(ids ...uuid.UUID) {
	if m.removedsecurity_questions == nil {
		m.removedsecurity_questions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.security_questions, ids[i])
		m.removedsecurity_questions[ids[i]] = struct{}{}
	}
}

// RemovedSecurityQuestions returns the removed IDs of the "security_questions" edge to the SecurityQuestion entity.
func (m *UserMutation) RemovedSecurityQuestionsIDs() (ids []uuid.UUID) {
	for id := range m.removedsecurity_questions {
		ids = append(ids, id)
	}
	return
}

// SecurityQuestionsIDs returns the "security_questions" edge IDs in the mutation.
func (m *UserMutation) SecurityQuestionsIDs() (ids []uuid.UUID) {
	for id := range m.security_questions {
		ids = append(ids, id)
	}
	return
}

// ResetSecurityQuestions resets all changes to the "security_questions" edge.
func (m *UserMutation) ResetSecurityQuestions() {
	m.security_questions = nil
	m.clearedsecurity_questions = false
	m.removedsecurity_questions = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.email_confirmed != nil {
		fields = append(fields, user.FieldEmailConfirmed)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldEmailConfirmed:
		return m.EmailConfirmed()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldEmailConfirmed:
		return m.OldEmailConfirmed(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldEmailConfirmed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailConfirmed(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldEmailConfirmed:
		m.ResetEmailConfirmed()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.projects != nil {
		edges = append(edges, user.EdgeProjects)
	}
	if m.queries != nil {
		edges = append(edges, user.EdgeQueries)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.security_questions != nil {
		edges = append(edges, user.EdgeSecurityQuestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.queries))
		for id := range m.queries {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSecurityQuestions:
		ids := make([]ent.Value, 0, len(m.security_questions))
		for id := range m.security_questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedprojects != nil {
		edges = append(edges, user.EdgeProjects)
	}
	if m.removedqueries != nil {
		edges = append(edges, user.EdgeQueries)
	}
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedsecurity_questions != nil {
		edges = append(edges, user.EdgeSecurityQuestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.removedqueries))
		for id := range m.removedqueries {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSecurityQuestions:
		ids := make([]ent.Value, 0, len(m.removedsecurity_questions))
		for id := range m.removedsecurity_questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedprojects {
		edges = append(edges, user.EdgeProjects)
	}
	if m.clearedqueries {
		edges = append(edges, user.EdgeQueries)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedsecurity_questions {
		edges = append(edges, user.EdgeSecurityQuestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeProjects:
		return m.clearedprojects
	case user.EdgeQueries:
		return m.clearedqueries
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeSecurityQuestions:
		return m.clearedsecurity_questions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeProjects:
		m.ResetProjects()
		return nil
	case user.EdgeQueries:
		m.ResetQueries()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeSecurityQuestions:
		m.ResetSecurityQuestions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPromptMutation represents an operation that mutates the UserPrompt nodes in the graph.
type UserPromptMutation struct {
	config
	op             Op
	typ            string
	id             *int
	query_text     *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	user           *uuid.UUID
	cleareduser    bool
	project        *int
	clearedproject bool
	results        map[int]struct{}
	removedresults map[int]struct{}
	clearedresults bool
	done           bool
	oldValue       func(context.Context) (*UserPrompt, error)
	predicates     []predicate.UserPrompt
}

var _ ent.Mutation = (*UserPromptMutation)(nil)

// userpromptOption allows management of the mutation configuration using functional options.
type userpromptOption func(*UserPromptMutation)

// newUserPromptMutation creates new mutation for the UserPrompt entity.
func newUserPromptMutation(c config, op Op, opts ...userpromptOption) *UserPromptMutation {
	m := &UserPromptMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPrompt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPromptID sets the ID field of the mutation.
func withUserPromptID(id int) userpromptOption {
	return func(m *UserPromptMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPrompt
		)
		m.oldValue = func(ctx context.Context) (*UserPrompt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPrompt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPrompt sets the old UserPrompt of the mutation.
func withUserPrompt(node *UserPrompt) userpromptOption {
	return func(m *UserPromptMutation) {
		m.oldValue = func(context.Context) (*UserPrompt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPromptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPromptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPromptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPromptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPrompt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQueryText sets the "query_text" field.
func (m *UserPromptMutation) SetQueryText(s string) {
	m.query_text = &s
}

// QueryText returns the value of the "query_text" field in the mutation.
func (m *UserPromptMutation) QueryText() (r string, exists bool) {
	v := m.query_text
	if v == nil {
		return
	}
	return *v, true
}

// OldQueryText returns the old "query_text" field's value of the UserPrompt entity.
// If the UserPrompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPromptMutation) OldQueryText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQueryText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQueryText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQueryText: %w", err)
	}
	return oldValue.QueryText, nil
}

// ResetQueryText resets all changes to the "query_text" field.
func (m *UserPromptMutation) ResetQueryText() {
	m.query_text = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserPromptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserPromptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserPrompt entity.
// If the UserPrompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPromptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserPromptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserPromptMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPromptMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPromptMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserPromptMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPromptMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPromptMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *UserPromptMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *UserPromptMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *UserPromptMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *UserPromptMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *UserPromptMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *UserPromptMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddResultIDs adds the "results" edge to the QueryResult entity by ids.
func (m *UserPromptMutation) AddResultIDs(ids ...int) {
	if m.results == nil {
		m.results = make(map[int]struct{})
	}
	for i := range ids {
		m.results[ids[i]] = struct{}{}
	}
}

// ClearResults clears the "results" edge to the QueryResult entity.
func (m *UserPromptMutation) ClearResults() {
	m.clearedresults = true
}

// ResultsCleared reports if the "results" edge to the QueryResult entity was cleared.
func (m *UserPromptMutation) ResultsCleared() bool {
	return m.clearedresults
}

// RemoveResultIDs removes the "results" edge to the QueryResult entity by IDs.
func (m *UserPromptMutation) RemoveResultIDs(ids ...int) {
	if m.removedresults == nil {
		m.removedresults = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.results, ids[i])
		m.removedresults[ids[i]] = struct{}{}
	}
}

// RemovedResults returns the removed IDs of the "results" edge to the QueryResult entity.
func (m *UserPromptMutation) RemovedResultsIDs() (ids []int) {
	for id := range m.removedresults {
		ids = append(ids, id)
	}
	return
}

// ResultsIDs returns the "results" edge IDs in the mutation.
func (m *UserPromptMutation) ResultsIDs() (ids []int) {
	for id := range m.results {
		ids = append(ids, id)
	}
	return
}

// ResetResults resets all changes to the "results" edge.
func (m *UserPromptMutation) ResetResults() {
	m.results = nil
	m.clearedresults = false
	m.removedresults = nil
}

// Where appends a list predicates to the UserPromptMutation builder.
func (m *UserPromptMutation) Where(ps ...predicate.UserPrompt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPromptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPromptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPrompt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPromptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPromptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPrompt).
func (m *UserPromptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPromptMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.query_text != nil {
		fields = append(fields, userprompt.FieldQueryText)
	}
	if m.created_at != nil {
		fields = append(fields, userprompt.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPromptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userprompt.FieldQueryText:
		return m.QueryText()
	case userprompt.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPromptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userprompt.FieldQueryText:
		return m.OldQueryText(ctx)
	case userprompt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserPrompt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPromptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userprompt.FieldQueryText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQueryText(v)
		return nil
	case userprompt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserPrompt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPromptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPromptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPromptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserPrompt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPromptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPromptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPromptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserPrompt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPromptMutation) ResetField(name string) error {
	switch name {
	case userprompt.FieldQueryText:
		m.ResetQueryText()
		return nil
	case userprompt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserPrompt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPromptMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, userprompt.EdgeUser)
	}
	if m.project != nil {
		edges = append(edges, userprompt.EdgeProject)
	}
	if m.results != nil {
		edges = append(edges, userprompt.EdgeResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPromptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userprompt.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userprompt.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case userprompt.EdgeResults:
		ids := make([]ent.Value, 0, len(m.results))
		for id := range m.results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPromptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedresults != nil {
		edges = append(edges, userprompt.EdgeResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPromptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userprompt.EdgeResults:
		ids := make([]ent.Value, 0, len(m.removedresults))
		for id := range m.removedresults {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPromptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, userprompt.EdgeUser)
	}
	if m.clearedproject {
		edges = append(edges, userprompt.EdgeProject)
	}
	if m.clearedresults {
		edges = append(edges, userprompt.EdgeResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPromptMutation) EdgeCleared(name string) bool {
	switch name {
	case userprompt.EdgeUser:
		return m.cleareduser
	case userprompt.EdgeProject:
		return m.clearedproject
	case userprompt.EdgeResults:
		return m.clearedresults
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPromptMutation) ClearEdge(name string) error {
	switch name {
	case userprompt.EdgeUser:
		m.ClearUser()
		return nil
	case userprompt.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown UserPrompt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPromptMutation) ResetEdge(name string) error {
	switch name {
	case userprompt.EdgeUser:
		m.ResetUser()
		return nil
	case userprompt.EdgeProject:
		m.ResetProject()
		return nil
	case userprompt.EdgeResults:
		m.ResetResults()
		return nil
	}
	return fmt.Errorf("unknown UserPrompt edge %s", name)
}
