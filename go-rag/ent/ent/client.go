// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"go-rag/ent/ent/migrate"

	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/embedding"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/securityquestion"
	"go-rag/ent/ent/session"
	"go-rag/ent/ent/user"
	"go-rag/ent/ent/userprompt"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chunk is the client for interacting with the Chunk builders.
	Chunk *ChunkClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// Embedding is the client for interacting with the Embedding builders.
	Embedding *EmbeddingClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// QueryResult is the client for interacting with the QueryResult builders.
	QueryResult *QueryResultClient
	// SecurityQuestion is the client for interacting with the SecurityQuestion builders.
	SecurityQuestion *SecurityQuestionClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPrompt is the client for interacting with the UserPrompt builders.
	UserPrompt *UserPromptClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chunk = NewChunkClient(c.config)
	c.Document = NewDocumentClient(c.config)
	c.Embedding = NewEmbeddingClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.QueryResult = NewQueryResultClient(c.config)
	c.SecurityQuestion = NewSecurityQuestionClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPrompt = NewUserPromptClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Chunk:            NewChunkClient(cfg),
		Document:         NewDocumentClient(cfg),
		Embedding:        NewEmbeddingClient(cfg),
		Project:          NewProjectClient(cfg),
		QueryResult:      NewQueryResultClient(cfg),
		SecurityQuestion: NewSecurityQuestionClient(cfg),
		Session:          NewSessionClient(cfg),
		User:             NewUserClient(cfg),
		UserPrompt:       NewUserPromptClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Chunk:            NewChunkClient(cfg),
		Document:         NewDocumentClient(cfg),
		Embedding:        NewEmbeddingClient(cfg),
		Project:          NewProjectClient(cfg),
		QueryResult:      NewQueryResultClient(cfg),
		SecurityQuestion: NewSecurityQuestionClient(cfg),
		Session:          NewSessionClient(cfg),
		User:             NewUserClient(cfg),
		UserPrompt:       NewUserPromptClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chunk.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Chunk, c.Document, c.Embedding, c.Project, c.QueryResult, c.SecurityQuestion,
		c.Session, c.User, c.UserPrompt,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Chunk, c.Document, c.Embedding, c.Project, c.QueryResult, c.SecurityQuestion,
		c.Session, c.User, c.UserPrompt,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChunkMutation:
		return c.Chunk.mutate(ctx, m)
	case *DocumentMutation:
		return c.Document.mutate(ctx, m)
	case *EmbeddingMutation:
		return c.Embedding.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *QueryResultMutation:
		return c.QueryResult.mutate(ctx, m)
	case *SecurityQuestionMutation:
		return c.SecurityQuestion.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPromptMutation:
		return c.UserPrompt.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChunkClient is a client for the Chunk schema.
type ChunkClient struct {
	config
}

// NewChunkClient returns a client for the Chunk from the given config.
func NewChunkClient(c config) *ChunkClient {
	return &ChunkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chunk.Hooks(f(g(h())))`.
func (c *ChunkClient) Use(hooks ...Hook) {
	c.hooks.Chunk = append(c.hooks.Chunk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chunk.Intercept(f(g(h())))`.
func (c *ChunkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chunk = append(c.inters.Chunk, interceptors...)
}

// Create returns a builder for creating a Chunk entity.
func (c *ChunkClient) Create() *ChunkCreate {
	mutation := newChunkMutation(c.config, OpCreate)
	return &ChunkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chunk entities.
func (c *ChunkClient) CreateBulk(builders ...*ChunkCreate) *ChunkCreateBulk {
	return &ChunkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChunkClient) MapCreateBulk(slice any, setFunc func(*ChunkCreate, int)) *ChunkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChunkCreateBulk{err: fmt.Errorf("calling to ChunkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChunkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChunkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chunk.
func (c *ChunkClient) Update() *ChunkUpdate {
	mutation := newChunkMutation(c.config, OpUpdate)
	return &ChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChunkClient) UpdateOne(_m *Chunk) *ChunkUpdateOne {
	mutation := newChunkMutation(c.config, OpUpdateOne, withChunk(_m))
	return &ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChunkClient) UpdateOneID(id int) *ChunkUpdateOne {
	mutation := newChunkMutation(c.config, OpUpdateOne, withChunkID(id))
	return &ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chunk.
func (c *ChunkClient) Delete() *ChunkDelete {
	mutation := newChunkMutation(c.config, OpDelete)
	return &ChunkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChunkClient) DeleteOne(_m *Chunk) *ChunkDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChunkClient) DeleteOneID(id int) *ChunkDeleteOne {
	builder := c.Delete().Where(chunk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChunkDeleteOne{builder}
}

// Query returns a query builder for Chunk.
func (c *ChunkClient) Query() *ChunkQuery {
	return &ChunkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChunk},
		inters: c.Interceptors(),
	}
}

// Get returns a Chunk entity by its id.
func (c *ChunkClient) Get(ctx context.Context, id int) (*Chunk, error) {
	return c.Query().Where(chunk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChunkClient) GetX(ctx context.Context, id int) *Chunk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDocument queries the document edge of a Chunk.
func (c *ChunkClient) QueryDocument(_m *Chunk) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chunk.Table, chunk.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chunk.DocumentTable, chunk.DocumentColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmbeddings queries the embeddings edge of a Chunk.
func (c *ChunkClient) QueryEmbeddings(_m *Chunk) *EmbeddingQuery {
	query := (&EmbeddingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chunk.Table, chunk.FieldID, id),
			sqlgraph.To(embedding.Table, embedding.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chunk.EmbeddingsTable, chunk.EmbeddingsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChunkClient) Hooks() []Hook {
	return c.hooks.Chunk
}

// Interceptors returns the client interceptors.
func (c *ChunkClient) Interceptors() []Interceptor {
	return c.inters.Chunk
}

func (c *ChunkClient) mutate(ctx context.Context, m *ChunkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChunkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChunkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chunk mutation op: %q", m.Op())
	}
}

// DocumentClient is a client for the Document schema.
type DocumentClient struct {
	config
}

// NewDocumentClient returns a client for the Document from the given config.
func NewDocumentClient(c config) *DocumentClient {
	return &DocumentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `document.Hooks(f(g(h())))`.
func (c *DocumentClient) Use(hooks ...Hook) {
	c.hooks.Document = append(c.hooks.Document, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `document.Intercept(f(g(h())))`.
func (c *DocumentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Document = append(c.inters.Document, interceptors...)
}

// Create returns a builder for creating a Document entity.
func (c *DocumentClient) Create() *DocumentCreate {
	mutation := newDocumentMutation(c.config, OpCreate)
	return &DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Document entities.
func (c *DocumentClient) CreateBulk(builders ...*DocumentCreate) *DocumentCreateBulk {
	return &DocumentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DocumentClient) MapCreateBulk(slice any, setFunc func(*DocumentCreate, int)) *DocumentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DocumentCreateBulk{err: fmt.Errorf("calling to DocumentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DocumentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DocumentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Document.
func (c *DocumentClient) Update() *DocumentUpdate {
	mutation := newDocumentMutation(c.config, OpUpdate)
	return &DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DocumentClient) UpdateOne(_m *Document) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocument(_m))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DocumentClient) UpdateOneID(id int) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocumentID(id))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Document.
func (c *DocumentClient) Delete() *DocumentDelete {
	mutation := newDocumentMutation(c.config, OpDelete)
	return &DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DocumentClient) DeleteOne(_m *Document) *DocumentDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DocumentClient) DeleteOneID(id int) *DocumentDeleteOne {
	builder := c.Delete().Where(document.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DocumentDeleteOne{builder}
}

// Query returns a query builder for Document.
func (c *DocumentClient) Query() *DocumentQuery {
	return &DocumentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDocument},
		inters: c.Interceptors(),
	}
}

// Get returns a Document entity by its id.
func (c *DocumentClient) Get(ctx context.Context, id int) (*Document, error) {
	return c.Query().Where(document.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DocumentClient) GetX(ctx context.Context, id int) *Document {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Document.
func (c *DocumentClient) QueryProject(_m *Document) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, document.ProjectTable, document.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChunks queries the chunks edge of a Document.
func (c *DocumentClient) QueryChunks(_m *Document) *ChunkQuery {
	query := (&ChunkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(chunk.Table, chunk.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, document.ChunksTable, document.ChunksColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueryResults queries the query_results edge of a Document.
func (c *DocumentClient) QueryQueryResults(_m *Document) *QueryResultQuery {
	query := (&QueryResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(queryresult.Table, queryresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, document.QueryResultsTable, document.QueryResultsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DocumentClient) Hooks() []Hook {
	return c.hooks.Document
}

// Interceptors returns the client interceptors.
func (c *DocumentClient) Interceptors() []Interceptor {
	return c.inters.Document
}

func (c *DocumentClient) mutate(ctx context.Context, m *DocumentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Document mutation op: %q", m.Op())
	}
}

// EmbeddingClient is a client for the Embedding schema.
type EmbeddingClient struct {
	config
}

// NewEmbeddingClient returns a client for the Embedding from the given config.
func NewEmbeddingClient(c config) *EmbeddingClient {
	return &EmbeddingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `embedding.Hooks(f(g(h())))`.
func (c *EmbeddingClient) Use(hooks ...Hook) {
	c.hooks.Embedding = append(c.hooks.Embedding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `embedding.Intercept(f(g(h())))`.
func (c *EmbeddingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Embedding = append(c.inters.Embedding, interceptors...)
}

// Create returns a builder for creating a Embedding entity.
func (c *EmbeddingClient) Create() *EmbeddingCreate {
	mutation := newEmbeddingMutation(c.config, OpCreate)
	return &EmbeddingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Embedding entities.
func (c *EmbeddingClient) CreateBulk(builders ...*EmbeddingCreate) *EmbeddingCreateBulk {
	return &EmbeddingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmbeddingClient) MapCreateBulk(slice any, setFunc func(*EmbeddingCreate, int)) *EmbeddingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmbeddingCreateBulk{err: fmt.Errorf("calling to EmbeddingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmbeddingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmbeddingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Embedding.
func (c *EmbeddingClient) Update() *EmbeddingUpdate {
	mutation := newEmbeddingMutation(c.config, OpUpdate)
	return &EmbeddingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmbeddingClient) UpdateOne(_m *Embedding) *EmbeddingUpdateOne {
	mutation := newEmbeddingMutation(c.config, OpUpdateOne, withEmbedding(_m))
	return &EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmbeddingClient) UpdateOneID(id int) *EmbeddingUpdateOne {
	mutation := newEmbeddingMutation(c.config, OpUpdateOne, withEmbeddingID(id))
	return &EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Embedding.
func (c *EmbeddingClient) Delete() *EmbeddingDelete {
	mutation := newEmbeddingMutation(c.config, OpDelete)
	return &EmbeddingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmbeddingClient) DeleteOne(_m *Embedding) *EmbeddingDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmbeddingClient) DeleteOneID(id int) *EmbeddingDeleteOne {
	builder := c.Delete().Where(embedding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmbeddingDeleteOne{builder}
}

// Query returns a query builder for Embedding.
func (c *EmbeddingClient) Query() *EmbeddingQuery {
	return &EmbeddingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmbedding},
		inters: c.Interceptors(),
	}
}

// Get returns a Embedding entity by its id.
func (c *EmbeddingClient) Get(ctx context.Context, id int) (*Embedding, error) {
	return c.Query().Where(embedding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmbeddingClient) GetX(ctx context.Context, id int) *Embedding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChunk queries the chunk edge of a Embedding.
func (c *EmbeddingClient) QueryChunk(_m *Embedding) *ChunkQuery {
	query := (&ChunkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(embedding.Table, embedding.FieldID, id),
			sqlgraph.To(chunk.Table, chunk.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, embedding.ChunkTable, embedding.ChunkColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmbeddingClient) Hooks() []Hook {
	return c.hooks.Embedding
}

// Interceptors returns the client interceptors.
func (c *EmbeddingClient) Interceptors() []Interceptor {
	return c.inters.Embedding
}

func (c *EmbeddingClient) mutate(ctx context.Context, m *EmbeddingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmbeddingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmbeddingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmbeddingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Embedding mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(_m *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(_m))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(_m *Project) *ProjectDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Project.
func (c *ProjectClient) QueryOwner(_m *Project) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.OwnerTable, project.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocuments queries the documents edge of a Project.
func (c *ProjectClient) QueryDocuments(_m *Project) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.DocumentsTable, project.DocumentsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueries queries the queries edge of a Project.
func (c *ProjectClient) QueryQueries(_m *Project) *UserPromptQuery {
	query := (&UserPromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(userprompt.Table, userprompt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.QueriesTable, project.QueriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// QueryResultClient is a client for the QueryResult schema.
type QueryResultClient struct {
	config
}

// NewQueryResultClient returns a client for the QueryResult from the given config.
func NewQueryResultClient(c config) *QueryResultClient {
	return &QueryResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `queryresult.Hooks(f(g(h())))`.
func (c *QueryResultClient) Use(hooks ...Hook) {
	c.hooks.QueryResult = append(c.hooks.QueryResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `queryresult.Intercept(f(g(h())))`.
func (c *QueryResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.QueryResult = append(c.inters.QueryResult, interceptors...)
}

// Create returns a builder for creating a QueryResult entity.
func (c *QueryResultClient) Create() *QueryResultCreate {
	mutation := newQueryResultMutation(c.config, OpCreate)
	return &QueryResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QueryResult entities.
func (c *QueryResultClient) CreateBulk(builders ...*QueryResultCreate) *QueryResultCreateBulk {
	return &QueryResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QueryResultClient) MapCreateBulk(slice any, setFunc func(*QueryResultCreate, int)) *QueryResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QueryResultCreateBulk{err: fmt.Errorf("calling to QueryResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QueryResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QueryResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QueryResult.
func (c *QueryResultClient) Update() *QueryResultUpdate {
	mutation := newQueryResultMutation(c.config, OpUpdate)
	return &QueryResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QueryResultClient) UpdateOne(_m *QueryResult) *QueryResultUpdateOne {
	mutation := newQueryResultMutation(c.config, OpUpdateOne, withQueryResult(_m))
	return &QueryResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QueryResultClient) UpdateOneID(id int) *QueryResultUpdateOne {
	mutation := newQueryResultMutation(c.config, OpUpdateOne, withQueryResultID(id))
	return &QueryResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QueryResult.
func (c *QueryResultClient) Delete() *QueryResultDelete {
	mutation := newQueryResultMutation(c.config, OpDelete)
	return &QueryResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QueryResultClient) DeleteOne(_m *QueryResult) *QueryResultDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QueryResultClient) DeleteOneID(id int) *QueryResultDeleteOne {
	builder := c.Delete().Where(queryresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QueryResultDeleteOne{builder}
}

// Query returns a query builder for QueryResult.
func (c *QueryResultClient) Query() *QueryResultQuery {
	return &QueryResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQueryResult},
		inters: c.Interceptors(),
	}
}

// Get returns a QueryResult entity by its id.
func (c *QueryResultClient) Get(ctx context.Context, id int) (*QueryResult, error) {
	return c.Query().Where(queryresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QueryResultClient) GetX(ctx context.Context, id int) *QueryResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuery queries the query edge of a QueryResult.
func (c *QueryResultClient) QueryQuery(_m *QueryResult) *UserPromptQuery {
	query := (&UserPromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queryresult.Table, queryresult.FieldID, id),
			sqlgraph.To(userprompt.Table, userprompt.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, queryresult.QueryTable, queryresult.QueryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocument queries the document edge of a QueryResult.
func (c *QueryResultClient) QueryDocument(_m *QueryResult) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(queryresult.Table, queryresult.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, queryresult.DocumentTable, queryresult.DocumentColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QueryResultClient) Hooks() []Hook {
	return c.hooks.QueryResult
}

// Interceptors returns the client interceptors.
func (c *QueryResultClient) Interceptors() []Interceptor {
	return c.inters.QueryResult
}

func (c *QueryResultClient) mutate(ctx context.Context, m *QueryResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QueryResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QueryResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QueryResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QueryResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QueryResult mutation op: %q", m.Op())
	}
}

// SecurityQuestionClient is a client for the SecurityQuestion schema.
type SecurityQuestionClient struct {
	config
}

// NewSecurityQuestionClient returns a client for the SecurityQuestion from the given config.
func NewSecurityQuestionClient(c config) *SecurityQuestionClient {
	return &SecurityQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `securityquestion.Hooks(f(g(h())))`.
func (c *SecurityQuestionClient) Use(hooks ...Hook) {
	c.hooks.SecurityQuestion = append(c.hooks.SecurityQuestion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `securityquestion.Intercept(f(g(h())))`.
func (c *SecurityQuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SecurityQuestion = append(c.inters.SecurityQuestion, interceptors...)
}

// Create returns a builder for creating a SecurityQuestion entity.
func (c *SecurityQuestionClient) Create() *SecurityQuestionCreate {
	mutation := newSecurityQuestionMutation(c.config, OpCreate)
	return &SecurityQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SecurityQuestion entities.
func (c *SecurityQuestionClient) CreateBulk(builders ...*SecurityQuestionCreate) *SecurityQuestionCreateBulk {
	return &SecurityQuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SecurityQuestionClient) MapCreateBulk(slice any, setFunc func(*SecurityQuestionCreate, int)) *SecurityQuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SecurityQuestionCreateBulk{err: fmt.Errorf("calling to SecurityQuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SecurityQuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SecurityQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SecurityQuestion.
func (c *SecurityQuestionClient) Update() *SecurityQuestionUpdate {
	mutation := newSecurityQuestionMutation(c.config, OpUpdate)
	return &SecurityQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecurityQuestionClient) UpdateOne(_m *SecurityQuestion) *SecurityQuestionUpdateOne {
	mutation := newSecurityQuestionMutation(c.config, OpUpdateOne, withSecurityQuestion(_m))
	return &SecurityQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecurityQuestionClient) UpdateOneID(id uuid.UUID) *SecurityQuestionUpdateOne {
	mutation := newSecurityQuestionMutation(c.config, OpUpdateOne, withSecurityQuestionID(id))
	return &SecurityQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SecurityQuestion.
func (c *SecurityQuestionClient) Delete() *SecurityQuestionDelete {
	mutation := newSecurityQuestionMutation(c.config, OpDelete)
	return &SecurityQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecurityQuestionClient) DeleteOne(_m *SecurityQuestion) *SecurityQuestionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecurityQuestionClient) DeleteOneID(id uuid.UUID) *SecurityQuestionDeleteOne {
	builder := c.Delete().Where(securityquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecurityQuestionDeleteOne{builder}
}

// Query returns a query builder for SecurityQuestion.
func (c *SecurityQuestionClient) Query() *SecurityQuestionQuery {
	return &SecurityQuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecurityQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a SecurityQuestion entity by its id.
func (c *SecurityQuestionClient) Get(ctx context.Context, id uuid.UUID) (*SecurityQuestion, error) {
	return c.Query().Where(securityquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecurityQuestionClient) GetX(ctx context.Context, id uuid.UUID) *SecurityQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SecurityQuestion.
func (c *SecurityQuestionClient) QueryUser(_m *SecurityQuestion) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(securityquestion.Table, securityquestion.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, securityquestion.UserTable, securityquestion.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecurityQuestionClient) Hooks() []Hook {
	return c.hooks.SecurityQuestion
}

// Interceptors returns the client interceptors.
func (c *SecurityQuestionClient) Interceptors() []Interceptor {
	return c.inters.SecurityQuestion
}

func (c *SecurityQuestionClient) mutate(ctx context.Context, m *SecurityQuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecurityQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecurityQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecurityQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecurityQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SecurityQuestion mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(_m *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(_m))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(_m *Session) *SessionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(_m *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a User.
func (c *UserClient) QueryProjects(_m *User) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectsTable, user.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQueries queries the queries edge of a User.
func (c *UserClient) QueryQueries(_m *User) *UserPromptQuery {
	query := (&UserPromptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userprompt.Table, userprompt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.QueriesTable, user.QueriesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(_m *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecurityQuestions queries the security_questions edge of a User.
func (c *UserClient) QuerySecurityQuestions(_m *User) *SecurityQuestionQuery {
	query := (&SecurityQuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(securityquestion.Table, securityquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SecurityQuestionsTable, user.SecurityQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPromptClient is a client for the UserPrompt schema.
type UserPromptClient struct {
	config
}

// NewUserPromptClient returns a client for the UserPrompt from the given config.
func NewUserPromptClient(c config) *UserPromptClient {
	return &UserPromptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprompt.Hooks(f(g(h())))`.
func (c *UserPromptClient) Use(hooks ...Hook) {
	c.hooks.UserPrompt = append(c.hooks.UserPrompt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userprompt.Intercept(f(g(h())))`.
func (c *UserPromptClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPrompt = append(c.inters.UserPrompt, interceptors...)
}

// Create returns a builder for creating a UserPrompt entity.
func (c *UserPromptClient) Create() *UserPromptCreate {
	mutation := newUserPromptMutation(c.config, OpCreate)
	return &UserPromptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPrompt entities.
func (c *UserPromptClient) CreateBulk(builders ...*UserPromptCreate) *UserPromptCreateBulk {
	return &UserPromptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPromptClient) MapCreateBulk(slice any, setFunc func(*UserPromptCreate, int)) *UserPromptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPromptCreateBulk{err: fmt.Errorf("calling to UserPromptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPromptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPromptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPrompt.
func (c *UserPromptClient) Update() *UserPromptUpdate {
	mutation := newUserPromptMutation(c.config, OpUpdate)
	return &UserPromptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPromptClient) UpdateOne(_m *UserPrompt) *UserPromptUpdateOne {
	mutation := newUserPromptMutation(c.config, OpUpdateOne, withUserPrompt(_m))
	return &UserPromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPromptClient) UpdateOneID(id int) *UserPromptUpdateOne {
	mutation := newUserPromptMutation(c.config, OpUpdateOne, withUserPromptID(id))
	return &UserPromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPrompt.
func (c *UserPromptClient) Delete() *UserPromptDelete {
	mutation := newUserPromptMutation(c.config, OpDelete)
	return &UserPromptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPromptClient) DeleteOne(_m *UserPrompt) *UserPromptDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPromptClient) DeleteOneID(id int) *UserPromptDeleteOne {
	builder := c.Delete().Where(userprompt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPromptDeleteOne{builder}
}

// Query returns a query builder for UserPrompt.
func (c *UserPromptClient) Query() *UserPromptQuery {
	return &UserPromptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPrompt},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPrompt entity by its id.
func (c *UserPromptClient) Get(ctx context.Context, id int) (*UserPrompt, error) {
	return c.Query().Where(userprompt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPromptClient) GetX(ctx context.Context, id int) *UserPrompt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPrompt.
func (c *UserPromptClient) QueryUser(_m *UserPrompt) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userprompt.UserTable, userprompt.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a UserPrompt.
func (c *UserPromptClient) QueryProject(_m *UserPrompt) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userprompt.ProjectTable, userprompt.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResults queries the results edge of a UserPrompt.
func (c *UserPromptClient) QueryResults(_m *UserPrompt) *QueryResultQuery {
	query := (&QueryResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, id),
			sqlgraph.To(queryresult.Table, queryresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userprompt.ResultsTable, userprompt.ResultsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPromptClient) Hooks() []Hook {
	return c.hooks.UserPrompt
}

// Interceptors returns the client interceptors.
func (c *UserPromptClient) Interceptors() []Interceptor {
	return c.inters.UserPrompt
}

func (c *UserPromptClient) mutate(ctx context.Context, m *UserPromptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPromptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPromptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPromptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPrompt mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chunk, Document, Embedding, Project, QueryResult, SecurityQuestion, Session,
		User, UserPrompt []ent.Hook
	}
	inters struct {
		Chunk, Document, Embedding, Project, QueryResult, SecurityQuestion, Session,
		User, UserPrompt []ent.Interceptor
	}
)
