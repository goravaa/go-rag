// Code generated by ent, DO NOT EDIT.

package queryresult

import (
	"go-rag/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLTE(FieldID, id))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldRank, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldScore, v))
}

// ContentSnippet applies equality check predicate on the "content_snippet" field. It's identical to ContentSnippetEQ.
func ContentSnippet(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldContentSnippet, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLTE(FieldRank, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLTE(FieldScore, v))
}

// ContentSnippetEQ applies the EQ predicate on the "content_snippet" field.
func ContentSnippetEQ(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEQ(FieldContentSnippet, v))
}

// ContentSnippetNEQ applies the NEQ predicate on the "content_snippet" field.
func ContentSnippetNEQ(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNEQ(FieldContentSnippet, v))
}

// ContentSnippetIn applies the In predicate on the "content_snippet" field.
func ContentSnippetIn(vs ...string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldIn(FieldContentSnippet, vs...))
}

// ContentSnippetNotIn applies the NotIn predicate on the "content_snippet" field.
func ContentSnippetNotIn(vs ...string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldNotIn(FieldContentSnippet, vs...))
}

// ContentSnippetGT applies the GT predicate on the "content_snippet" field.
func ContentSnippetGT(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGT(FieldContentSnippet, v))
}

// ContentSnippetGTE applies the GTE predicate on the "content_snippet" field.
func ContentSnippetGTE(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldGTE(FieldContentSnippet, v))
}

// ContentSnippetLT applies the LT predicate on the "content_snippet" field.
func ContentSnippetLT(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLT(FieldContentSnippet, v))
}

// ContentSnippetLTE applies the LTE predicate on the "content_snippet" field.
func ContentSnippetLTE(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldLTE(FieldContentSnippet, v))
}

// ContentSnippetContains applies the Contains predicate on the "content_snippet" field.
func ContentSnippetContains(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldContains(FieldContentSnippet, v))
}

// ContentSnippetHasPrefix applies the HasPrefix predicate on the "content_snippet" field.
func ContentSnippetHasPrefix(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldHasPrefix(FieldContentSnippet, v))
}

// ContentSnippetHasSuffix applies the HasSuffix predicate on the "content_snippet" field.
func ContentSnippetHasSuffix(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldHasSuffix(FieldContentSnippet, v))
}

// ContentSnippetEqualFold applies the EqualFold predicate on the "content_snippet" field.
func ContentSnippetEqualFold(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldEqualFold(FieldContentSnippet, v))
}

// ContentSnippetContainsFold applies the ContainsFold predicate on the "content_snippet" field.
func ContentSnippetContainsFold(v string) predicate.QueryResult {
	return predicate.QueryResult(sql.FieldContainsFold(FieldContentSnippet, v))
}

// HasQuery applies the HasEdge predicate on the "query" edge.
func HasQuery() predicate.QueryResult {
	return predicate.QueryResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QueryTable, QueryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueryWith applies the HasEdge predicate on the "query" edge with a given conditions (other predicates).
func HasQueryWith(preds ...predicate.UserPrompt) predicate.QueryResult {
	return predicate.QueryResult(func(s *sql.Selector) {
		step := newQueryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.QueryResult {
	return predicate.QueryResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DocumentTable, DocumentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.Document) predicate.QueryResult {
	return predicate.QueryResult(func(s *sql.Selector) {
		step := newDocumentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QueryResult) predicate.QueryResult {
	return predicate.QueryResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QueryResult) predicate.QueryResult {
	return predicate.QueryResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QueryResult) predicate.QueryResult {
	return predicate.QueryResult(sql.NotPredicates(p))
}
