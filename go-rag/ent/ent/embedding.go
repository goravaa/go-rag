// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/embedding"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Embedding is the model entity for the Embedding schema.
type Embedding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Vector holds the value of the "vector" field.
	Vector []float32 `json:"vector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmbeddingQuery when eager-loading is set.
	Edges            EmbeddingEdges `json:"edges"`
	chunk_embeddings *int
	selectValues     sql.SelectValues
}

// EmbeddingEdges holds the relations/edges for other nodes in the graph.
type EmbeddingEdges struct {
	// Chunk holds the value of the chunk edge.
	Chunk *Chunk `json:"chunk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChunkOrErr returns the Chunk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbeddingEdges) ChunkOrErr() (*Chunk, error) {
	if e.Chunk != nil {
		return e.Chunk, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chunk.Label}
	}
	return nil, &NotLoadedError{edge: "chunk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Embedding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case embedding.FieldVector:
			values[i] = new([]byte)
		case embedding.FieldID:
			values[i] = new(sql.NullInt64)
		case embedding.ForeignKeys[0]: // chunk_embeddings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Embedding fields.
func (_m *Embedding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case embedding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case embedding.FieldVector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Vector); err != nil {
					return fmt.Errorf("unmarshal field vector: %w", err)
				}
			}
		case embedding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chunk_embeddings", value)
			} else if value.Valid {
				_m.chunk_embeddings = new(int)
				*_m.chunk_embeddings = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Embedding.
// This includes values selected through modifiers, order, etc.
func (_m *Embedding) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChunk queries the "chunk" edge of the Embedding entity.
func (_m *Embedding) QueryChunk() *ChunkQuery {
	return NewEmbeddingClient(_m.config).QueryChunk(_m)
}

// Update returns a builder for updating this Embedding.
// Note that you need to call Embedding.Unwrap() before calling this method if this Embedding
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Embedding) Update() *EmbeddingUpdateOne {
	return NewEmbeddingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Embedding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Embedding) Unwrap() *Embedding {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Embedding is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Embedding) String() string {
	var builder strings.Builder
	builder.WriteString("Embedding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("vector=")
	builder.WriteString(fmt.Sprintf("%v", _m.Vector))
	builder.WriteByte(')')
	return builder.String()
}

// Embeddings is a parsable slice of Embedding.
type Embeddings []*Embedding
