// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/user"
	"go-rag/ent/ent/userprompt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserPromptQuery is the builder for querying UserPrompt entities.
type UserPromptQuery struct {
	config
	ctx         *QueryContext
	order       []userprompt.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserPrompt
	withUser    *UserQuery
	withProject *ProjectQuery
	withResults *QueryResultQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserPromptQuery builder.
func (_q *UserPromptQuery) Where(ps ...predicate.UserPrompt) *UserPromptQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *UserPromptQuery) Limit(limit int) *UserPromptQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *UserPromptQuery) Offset(offset int) *UserPromptQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *UserPromptQuery) Unique(unique bool) *UserPromptQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *UserPromptQuery) Order(o ...userprompt.OrderOption) *UserPromptQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryUser chains the current query on the "user" edge.
func (_q *UserPromptQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userprompt.UserTable, userprompt.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (_q *UserPromptQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userprompt.ProjectTable, userprompt.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResults chains the current query on the "results" edge.
func (_q *UserPromptQuery) QueryResults() *QueryResultQuery {
	query := (&QueryResultClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userprompt.Table, userprompt.FieldID, selector),
			sqlgraph.To(queryresult.Table, queryresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userprompt.ResultsTable, userprompt.ResultsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserPrompt entity from the query.
// Returns a *NotFoundError when no UserPrompt was found.
func (_q *UserPromptQuery) First(ctx context.Context) (*UserPrompt, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userprompt.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *UserPromptQuery) FirstX(ctx context.Context) *UserPrompt {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserPrompt ID from the query.
// Returns a *NotFoundError when no UserPrompt ID was found.
func (_q *UserPromptQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userprompt.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *UserPromptQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserPrompt entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserPrompt entity is found.
// Returns a *NotFoundError when no UserPrompt entities are found.
func (_q *UserPromptQuery) Only(ctx context.Context) (*UserPrompt, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userprompt.Label}
	default:
		return nil, &NotSingularError{userprompt.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *UserPromptQuery) OnlyX(ctx context.Context) *UserPrompt {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserPrompt ID in the query.
// Returns a *NotSingularError when more than one UserPrompt ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *UserPromptQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userprompt.Label}
	default:
		err = &NotSingularError{userprompt.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *UserPromptQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserPrompts.
func (_q *UserPromptQuery) All(ctx context.Context) ([]*UserPrompt, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserPrompt, *UserPromptQuery]()
	return withInterceptors[[]*UserPrompt](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *UserPromptQuery) AllX(ctx context.Context) []*UserPrompt {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserPrompt IDs.
func (_q *UserPromptQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(userprompt.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *UserPromptQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *UserPromptQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*UserPromptQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *UserPromptQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *UserPromptQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *UserPromptQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserPromptQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *UserPromptQuery) Clone() *UserPromptQuery {
	if _q == nil {
		return nil
	}
	return &UserPromptQuery{
		config:      _q.config,
		ctx:         _q.ctx.Clone(),
		order:       append([]userprompt.OrderOption{}, _q.order...),
		inters:      append([]Interceptor{}, _q.inters...),
		predicates:  append([]predicate.UserPrompt{}, _q.predicates...),
		withUser:    _q.withUser.Clone(),
		withProject: _q.withProject.Clone(),
		withResults: _q.withResults.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserPromptQuery) WithUser(opts ...func(*UserQuery)) *UserPromptQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUser = query
	return _q
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserPromptQuery) WithProject(opts ...func(*ProjectQuery)) *UserPromptQuery {
	query := (&ProjectClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProject = query
	return _q
}

// WithResults tells the query-builder to eager-load the nodes that are connected to
// the "results" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserPromptQuery) WithResults(opts ...func(*QueryResultQuery)) *UserPromptQuery {
	query := (&QueryResultClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withResults = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		QueryText string `json:"query_text,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserPrompt.Query().
//		GroupBy(userprompt.FieldQueryText).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *UserPromptQuery) GroupBy(field string, fields ...string) *UserPromptGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserPromptGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = userprompt.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		QueryText string `json:"query_text,omitempty"`
//	}
//
//	client.UserPrompt.Query().
//		Select(userprompt.FieldQueryText).
//		Scan(ctx, &v)
func (_q *UserPromptQuery) Select(fields ...string) *UserPromptSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &UserPromptSelect{UserPromptQuery: _q}
	sbuild.label = userprompt.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserPromptSelect configured with the given aggregations.
func (_q *UserPromptQuery) Aggregate(fns ...AggregateFunc) *UserPromptSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *UserPromptQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !userprompt.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *UserPromptQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserPrompt, error) {
	var (
		nodes       = []*UserPrompt{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [3]bool{
			_q.withUser != nil,
			_q.withProject != nil,
			_q.withResults != nil,
		}
	)
	if _q.withUser != nil || _q.withProject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userprompt.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserPrompt).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserPrompt{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withUser; query != nil {
		if err := _q.loadUser(ctx, query, nodes, nil,
			func(n *UserPrompt, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProject; query != nil {
		if err := _q.loadProject(ctx, query, nodes, nil,
			func(n *UserPrompt, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withResults; query != nil {
		if err := _q.loadResults(ctx, query, nodes,
			func(n *UserPrompt) { n.Edges.Results = []*QueryResult{} },
			func(n *UserPrompt, e *QueryResult) { n.Edges.Results = append(n.Edges.Results, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *UserPromptQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserPrompt, init func(*UserPrompt), assign func(*UserPrompt, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserPrompt)
	for i := range nodes {
		if nodes[i].user_queries == nil {
			continue
		}
		fk := *nodes[i].user_queries
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_queries" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *UserPromptQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*UserPrompt, init func(*UserPrompt), assign func(*UserPrompt, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserPrompt)
	for i := range nodes {
		if nodes[i].project_queries == nil {
			continue
		}
		fk := *nodes[i].project_queries
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_queries" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *UserPromptQuery) loadResults(ctx context.Context, query *QueryResultQuery, nodes []*UserPrompt, init func(*UserPrompt), assign func(*UserPrompt, *QueryResult)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserPrompt)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.QueryResult(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(userprompt.ResultsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_prompt_results
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_prompt_results" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_prompt_results" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *UserPromptQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *UserPromptQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userprompt.Table, userprompt.Columns, sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprompt.FieldID)
		for i := range fields {
			if fields[i] != userprompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *UserPromptQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(userprompt.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = userprompt.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserPromptGroupBy is the group-by builder for UserPrompt entities.
type UserPromptGroupBy struct {
	selector
	build *UserPromptQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *UserPromptGroupBy) Aggregate(fns ...AggregateFunc) *UserPromptGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *UserPromptGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserPromptQuery, *UserPromptGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *UserPromptGroupBy) sqlScan(ctx context.Context, root *UserPromptQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserPromptSelect is the builder for selecting fields of UserPrompt entities.
type UserPromptSelect struct {
	*UserPromptQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *UserPromptSelect) Aggregate(fns ...AggregateFunc) *UserPromptSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *UserPromptSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserPromptQuery, *UserPromptSelect](ctx, _s.UserPromptQuery, _s, _s.inters, v)
}

func (_s *UserPromptSelect) sqlScan(ctx context.Context, root *UserPromptQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
