// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/userprompt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QueryResultUpdate is the builder for updating QueryResult entities.
type QueryResultUpdate struct {
	config
	hooks    []Hook
	mutation *QueryResultMutation
}

// Where appends a list predicates to the QueryResultUpdate builder.
func (_u *QueryResultUpdate) Where(ps ...predicate.QueryResult) *QueryResultUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRank sets the "rank" field.
func (_u *QueryResultUpdate) SetRank(v int) *QueryResultUpdate {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *QueryResultUpdate) SetNillableRank(v *int) *QueryResultUpdate {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *QueryResultUpdate) AddRank(v int) *QueryResultUpdate {
	_u.mutation.AddRank(v)
	return _u
}

// SetScore sets the "score" field.
func (_u *QueryResultUpdate) SetScore(v float64) *QueryResultUpdate {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *QueryResultUpdate) SetNillableScore(v *float64) *QueryResultUpdate {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *QueryResultUpdate) AddScore(v float64) *QueryResultUpdate {
	_u.mutation.AddScore(v)
	return _u
}

// SetContentSnippet sets the "content_snippet" field.
func (_u *QueryResultUpdate) SetContentSnippet(v string) *QueryResultUpdate {
	_u.mutation.SetContentSnippet(v)
	return _u
}

// SetNillableContentSnippet sets the "content_snippet" field if the given value is not nil.
func (_u *QueryResultUpdate) SetNillableContentSnippet(v *string) *QueryResultUpdate {
	if v != nil {
		_u.SetContentSnippet(*v)
	}
	return _u
}

// SetQueryID sets the "query" edge to the UserPrompt entity by ID.
func (_u *QueryResultUpdate) SetQueryID(id int) *QueryResultUpdate {
	_u.mutation.SetQueryID(id)
	return _u
}

// SetNillableQueryID sets the "query" edge to the UserPrompt entity by ID if the given value is not nil.
func (_u *QueryResultUpdate) SetNillableQueryID(id *int) *QueryResultUpdate {
	if id != nil {
		_u = _u.SetQueryID(*id)
	}
	return _u
}

// SetQuery sets the "query" edge to the UserPrompt entity.
func (_u *QueryResultUpdate) SetQuery(v *UserPrompt) *QueryResultUpdate {
	return _u.SetQueryID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_u *QueryResultUpdate) AddChunkIDs(ids ...int) *QueryResultUpdate {
	_u.mutation.AddChunkIDs(ids...)
	return _u
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_u *QueryResultUpdate) AddChunks(v ...*Chunk) *QueryResultUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChunkIDs(ids...)
}

// Mutation returns the QueryResultMutation object of the builder.
func (_u *QueryResultUpdate) Mutation() *QueryResultMutation {
	return _u.mutation
}

// ClearQuery clears the "query" edge to the UserPrompt entity.
func (_u *QueryResultUpdate) ClearQuery() *QueryResultUpdate {
	_u.mutation.ClearQuery()
	return _u
}

// ClearChunks clears all "chunks" edges to the Chunk entity.
func (_u *QueryResultUpdate) ClearChunks() *QueryResultUpdate {
	_u.mutation.ClearChunks()
	return _u
}

// RemoveChunkIDs removes the "chunks" edge to Chunk entities by IDs.
func (_u *QueryResultUpdate) RemoveChunkIDs(ids ...int) *QueryResultUpdate {
	_u.mutation.RemoveChunkIDs(ids...)
	return _u
}

// RemoveChunks removes "chunks" edges to Chunk entities.
func (_u *QueryResultUpdate) RemoveChunks(v ...*Chunk) *QueryResultUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChunkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QueryResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QueryResultUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QueryResultUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QueryResultUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *QueryResultUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(queryresult.Table, queryresult.Columns, sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(queryresult.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(queryresult.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(queryresult.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(queryresult.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ContentSnippet(); ok {
		_spec.SetField(queryresult.FieldContentSnippet, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryresult.QueryTable,
			Columns: []string{queryresult.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryresult.QueryTable,
			Columns: []string{queryresult.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChunksIDs(); len(nodes) > 0 && !_u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queryresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QueryResultUpdateOne is the builder for updating a single QueryResult entity.
type QueryResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueryResultMutation
}

// SetRank sets the "rank" field.
func (_u *QueryResultUpdateOne) SetRank(v int) *QueryResultUpdateOne {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *QueryResultUpdateOne) SetNillableRank(v *int) *QueryResultUpdateOne {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *QueryResultUpdateOne) AddRank(v int) *QueryResultUpdateOne {
	_u.mutation.AddRank(v)
	return _u
}

// SetScore sets the "score" field.
func (_u *QueryResultUpdateOne) SetScore(v float64) *QueryResultUpdateOne {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *QueryResultUpdateOne) SetNillableScore(v *float64) *QueryResultUpdateOne {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *QueryResultUpdateOne) AddScore(v float64) *QueryResultUpdateOne {
	_u.mutation.AddScore(v)
	return _u
}

// SetContentSnippet sets the "content_snippet" field.
func (_u *QueryResultUpdateOne) SetContentSnippet(v string) *QueryResultUpdateOne {
	_u.mutation.SetContentSnippet(v)
	return _u
}

// SetNillableContentSnippet sets the "content_snippet" field if the given value is not nil.
func (_u *QueryResultUpdateOne) SetNillableContentSnippet(v *string) *QueryResultUpdateOne {
	if v != nil {
		_u.SetContentSnippet(*v)
	}
	return _u
}

// SetQueryID sets the "query" edge to the UserPrompt entity by ID.
func (_u *QueryResultUpdateOne) SetQueryID(id int) *QueryResultUpdateOne {
	_u.mutation.SetQueryID(id)
	return _u
}

// SetNillableQueryID sets the "query" edge to the UserPrompt entity by ID if the given value is not nil.
func (_u *QueryResultUpdateOne) SetNillableQueryID(id *int) *QueryResultUpdateOne {
	if id != nil {
		_u = _u.SetQueryID(*id)
	}
	return _u
}

// SetQuery sets the "query" edge to the UserPrompt entity.
func (_u *QueryResultUpdateOne) SetQuery(v *UserPrompt) *QueryResultUpdateOne {
	return _u.SetQueryID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_u *QueryResultUpdateOne) AddChunkIDs(ids ...int) *QueryResultUpdateOne {
	_u.mutation.AddChunkIDs(ids...)
	return _u
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_u *QueryResultUpdateOne) AddChunks(v ...*Chunk) *QueryResultUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChunkIDs(ids...)
}

// Mutation returns the QueryResultMutation object of the builder.
func (_u *QueryResultUpdateOne) Mutation() *QueryResultMutation {
	return _u.mutation
}

// ClearQuery clears the "query" edge to the UserPrompt entity.
func (_u *QueryResultUpdateOne) ClearQuery() *QueryResultUpdateOne {
	_u.mutation.ClearQuery()
	return _u
}

// ClearChunks clears all "chunks" edges to the Chunk entity.
func (_u *QueryResultUpdateOne) ClearChunks() *QueryResultUpdateOne {
	_u.mutation.ClearChunks()
	return _u
}

// RemoveChunkIDs removes the "chunks" edge to Chunk entities by IDs.
func (_u *QueryResultUpdateOne) RemoveChunkIDs(ids ...int) *QueryResultUpdateOne {
	_u.mutation.RemoveChunkIDs(ids...)
	return _u
}

// RemoveChunks removes "chunks" edges to Chunk entities.
func (_u *QueryResultUpdateOne) RemoveChunks(v ...*Chunk) *QueryResultUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChunkIDs(ids...)
}

// Where appends a list predicates to the QueryResultUpdate builder.
func (_u *QueryResultUpdateOne) Where(ps ...predicate.QueryResult) *QueryResultUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QueryResultUpdateOne) Select(field string, fields ...string) *QueryResultUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated QueryResult entity.
func (_u *QueryResultUpdateOne) Save(ctx context.Context) (*QueryResult, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QueryResultUpdateOne) SaveX(ctx context.Context) *QueryResult {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QueryResultUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QueryResultUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *QueryResultUpdateOne) sqlSave(ctx context.Context) (_node *QueryResult, err error) {
	_spec := sqlgraph.NewUpdateSpec(queryresult.Table, queryresult.Columns, sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QueryResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queryresult.FieldID)
		for _, f := range fields {
			if !queryresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queryresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(queryresult.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(queryresult.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(queryresult.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(queryresult.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.ContentSnippet(); ok {
		_spec.SetField(queryresult.FieldContentSnippet, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryresult.QueryTable,
			Columns: []string{queryresult.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryresult.QueryTable,
			Columns: []string{queryresult.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChunksIDs(); len(nodes) > 0 && !_u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QueryResult{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queryresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
