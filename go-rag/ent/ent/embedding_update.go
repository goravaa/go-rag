// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/embedding"
	"go-rag/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EmbeddingUpdate is the builder for updating Embedding entities.
type EmbeddingUpdate struct {
	config
	hooks    []Hook
	mutation *EmbeddingMutation
}

// Where appends a list predicates to the EmbeddingUpdate builder.
func (_u *EmbeddingUpdate) Where(ps ...predicate.Embedding) *EmbeddingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetVector sets the "vector" field.
func (_u *EmbeddingUpdate) SetVector(v []float32) *EmbeddingUpdate {
	_u.mutation.SetVector(v)
	return _u
}

// AppendVector appends value to the "vector" field.
func (_u *EmbeddingUpdate) AppendVector(v []float32) *EmbeddingUpdate {
	_u.mutation.AppendVector(v)
	return _u
}

// SetChunkID sets the "chunk" edge to the Chunk entity by ID.
func (_u *EmbeddingUpdate) SetChunkID(id int) *EmbeddingUpdate {
	_u.mutation.SetChunkID(id)
	return _u
}

// SetNillableChunkID sets the "chunk" edge to the Chunk entity by ID if the given value is not nil.
func (_u *EmbeddingUpdate) SetNillableChunkID(id *int) *EmbeddingUpdate {
	if id != nil {
		_u = _u.SetChunkID(*id)
	}
	return _u
}

// SetChunk sets the "chunk" edge to the Chunk entity.
func (_u *EmbeddingUpdate) SetChunk(v *Chunk) *EmbeddingUpdate {
	return _u.SetChunkID(v.ID)
}

// Mutation returns the EmbeddingMutation object of the builder.
func (_u *EmbeddingUpdate) Mutation() *EmbeddingMutation {
	return _u.mutation
}

// ClearChunk clears the "chunk" edge to the Chunk entity.
func (_u *EmbeddingUpdate) ClearChunk() *EmbeddingUpdate {
	_u.mutation.ClearChunk()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EmbeddingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmbeddingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EmbeddingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmbeddingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EmbeddingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(embedding.Table, embedding.Columns, sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Vector(); ok {
		_spec.SetField(embedding.FieldVector, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, embedding.FieldVector, value)
		})
	}
	if _u.mutation.ChunkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedding.ChunkTable,
			Columns: []string{embedding.ChunkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedding.ChunkTable,
			Columns: []string{embedding.ChunkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EmbeddingUpdateOne is the builder for updating a single Embedding entity.
type EmbeddingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmbeddingMutation
}

// SetVector sets the "vector" field.
func (_u *EmbeddingUpdateOne) SetVector(v []float32) *EmbeddingUpdateOne {
	_u.mutation.SetVector(v)
	return _u
}

// AppendVector appends value to the "vector" field.
func (_u *EmbeddingUpdateOne) AppendVector(v []float32) *EmbeddingUpdateOne {
	_u.mutation.AppendVector(v)
	return _u
}

// SetChunkID sets the "chunk" edge to the Chunk entity by ID.
func (_u *EmbeddingUpdateOne) SetChunkID(id int) *EmbeddingUpdateOne {
	_u.mutation.SetChunkID(id)
	return _u
}

// SetNillableChunkID sets the "chunk" edge to the Chunk entity by ID if the given value is not nil.
func (_u *EmbeddingUpdateOne) SetNillableChunkID(id *int) *EmbeddingUpdateOne {
	if id != nil {
		_u = _u.SetChunkID(*id)
	}
	return _u
}

// SetChunk sets the "chunk" edge to the Chunk entity.
func (_u *EmbeddingUpdateOne) SetChunk(v *Chunk) *EmbeddingUpdateOne {
	return _u.SetChunkID(v.ID)
}

// Mutation returns the EmbeddingMutation object of the builder.
func (_u *EmbeddingUpdateOne) Mutation() *EmbeddingMutation {
	return _u.mutation
}

// ClearChunk clears the "chunk" edge to the Chunk entity.
func (_u *EmbeddingUpdateOne) ClearChunk() *EmbeddingUpdateOne {
	_u.mutation.ClearChunk()
	return _u
}

// Where appends a list predicates to the EmbeddingUpdate builder.
func (_u *EmbeddingUpdateOne) Where(ps ...predicate.Embedding) *EmbeddingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EmbeddingUpdateOne) Select(field string, fields ...string) *EmbeddingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Embedding entity.
func (_u *EmbeddingUpdateOne) Save(ctx context.Context) (*Embedding, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EmbeddingUpdateOne) SaveX(ctx context.Context) *Embedding {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EmbeddingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EmbeddingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EmbeddingUpdateOne) sqlSave(ctx context.Context) (_node *Embedding, err error) {
	_spec := sqlgraph.NewUpdateSpec(embedding.Table, embedding.Columns, sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Embedding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, embedding.FieldID)
		for _, f := range fields {
			if !embedding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != embedding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Vector(); ok {
		_spec.SetField(embedding.FieldVector, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, embedding.FieldVector, value)
		})
	}
	if _u.mutation.ChunkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedding.ChunkTable,
			Columns: []string{embedding.ChunkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedding.ChunkTable,
			Columns: []string{embedding.ChunkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Embedding{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
