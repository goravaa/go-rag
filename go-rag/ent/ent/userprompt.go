// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/user"
	"go-rag/ent/ent/userprompt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserPrompt is the model entity for the UserPrompt schema.
type UserPrompt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QueryText holds the value of the "query_text" field.
	QueryText string `json:"query_text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPromptQuery when eager-loading is set.
	Edges           UserPromptEdges `json:"edges"`
	project_queries *int
	user_queries    *uuid.UUID
	selectValues    sql.SelectValues
}

// UserPromptEdges holds the relations/edges for other nodes in the graph.
type UserPromptEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Results holds the value of the results edge.
	Results []*QueryResult `json:"results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPromptEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPromptEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ResultsOrErr returns the Results value or an error if the edge
// was not loaded in eager-loading.
func (e UserPromptEdges) ResultsOrErr() ([]*QueryResult, error) {
	if e.loadedTypes[2] {
		return e.Results, nil
	}
	return nil, &NotLoadedError{edge: "results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPrompt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userprompt.FieldID:
			values[i] = new(sql.NullInt64)
		case userprompt.FieldQueryText:
			values[i] = new(sql.NullString)
		case userprompt.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case userprompt.ForeignKeys[0]: // project_queries
			values[i] = new(sql.NullInt64)
		case userprompt.ForeignKeys[1]: // user_queries
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPrompt fields.
func (_m *UserPrompt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userprompt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userprompt.FieldQueryText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query_text", values[i])
			} else if value.Valid {
				_m.QueryText = value.String
			}
		case userprompt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userprompt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_queries", value)
			} else if value.Valid {
				_m.project_queries = new(int)
				*_m.project_queries = int(value.Int64)
			}
		case userprompt.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_queries", values[i])
			} else if value.Valid {
				_m.user_queries = new(uuid.UUID)
				*_m.user_queries = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPrompt.
// This includes values selected through modifiers, order, etc.
func (_m *UserPrompt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPrompt entity.
func (_m *UserPrompt) QueryUser() *UserQuery {
	return NewUserPromptClient(_m.config).QueryUser(_m)
}

// QueryProject queries the "project" edge of the UserPrompt entity.
func (_m *UserPrompt) QueryProject() *ProjectQuery {
	return NewUserPromptClient(_m.config).QueryProject(_m)
}

// QueryResults queries the "results" edge of the UserPrompt entity.
func (_m *UserPrompt) QueryResults() *QueryResultQuery {
	return NewUserPromptClient(_m.config).QueryResults(_m)
}

// Update returns a builder for updating this UserPrompt.
// Note that you need to call UserPrompt.Unwrap() before calling this method if this UserPrompt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserPrompt) Update() *UserPromptUpdateOne {
	return NewUserPromptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserPrompt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserPrompt) Unwrap() *UserPrompt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPrompt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserPrompt) String() string {
	var builder strings.Builder
	builder.WriteString("UserPrompt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("query_text=")
	builder.WriteString(_m.QueryText)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPrompts is a parsable slice of UserPrompt.
type UserPrompts []*UserPrompt
