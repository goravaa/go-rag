// Code generated by ent, DO NOT EDIT.

package document

import (
	"go-rag/ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContent, v))
}

// ContentHash applies equality check predicate on the "content_hash" field. It's identical to ContentHashEQ.
func ContentHash(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentHash, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldName, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldContent, v))
}

// ContentHashEQ applies the EQ predicate on the "content_hash" field.
func ContentHashEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldContentHash, v))
}

// ContentHashNEQ applies the NEQ predicate on the "content_hash" field.
func ContentHashNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldContentHash, v))
}

// ContentHashIn applies the In predicate on the "content_hash" field.
func ContentHashIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldContentHash, vs...))
}

// ContentHashNotIn applies the NotIn predicate on the "content_hash" field.
func ContentHashNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldContentHash, vs...))
}

// ContentHashGT applies the GT predicate on the "content_hash" field.
func ContentHashGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldContentHash, v))
}

// ContentHashGTE applies the GTE predicate on the "content_hash" field.
func ContentHashGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldContentHash, v))
}

// ContentHashLT applies the LT predicate on the "content_hash" field.
func ContentHashLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldContentHash, v))
}

// ContentHashLTE applies the LTE predicate on the "content_hash" field.
func ContentHashLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldContentHash, v))
}

// ContentHashContains applies the Contains predicate on the "content_hash" field.
func ContentHashContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldContentHash, v))
}

// ContentHashHasPrefix applies the HasPrefix predicate on the "content_hash" field.
func ContentHashHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldContentHash, v))
}

// ContentHashHasSuffix applies the HasSuffix predicate on the "content_hash" field.
func ContentHashHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldContentHash, v))
}

// ContentHashIsNil applies the IsNil predicate on the "content_hash" field.
func ContentHashIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldContentHash))
}

// ContentHashNotNil applies the NotNil predicate on the "content_hash" field.
func ContentHashNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldContentHash))
}

// ContentHashEqualFold applies the EqualFold predicate on the "content_hash" field.
func ContentHashEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldContentHash, v))
}

// ContentHashContainsFold applies the ContainsFold predicate on the "content_hash" field.
func ContentHashContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldContentHash, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChunks applies the HasEdge predicate on the "chunks" edge.
func HasChunks() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChunksTable, ChunksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChunksWith applies the HasEdge predicate on the "chunks" edge with a given conditions (other predicates).
func HasChunksWith(preds ...predicate.Chunk) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newChunksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(sql.NotPredicates(p))
}
