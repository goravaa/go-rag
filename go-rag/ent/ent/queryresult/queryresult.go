// Code generated by ent, DO NOT EDIT.

package queryresult

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the queryresult type in the database.
	Label = "query_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldContentSnippet holds the string denoting the content_snippet field in the database.
	FieldContentSnippet = "content_snippet"
	// EdgeQuery holds the string denoting the query edge name in mutations.
	EdgeQuery = "query"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// Table holds the table name of the queryresult in the database.
	Table = "query_results"
	// QueryTable is the table that holds the query relation/edge.
	QueryTable = "query_results"
	// QueryInverseTable is the table name for the UserPrompt entity.
	// It exists in this package in order to avoid circular dependency with the "userprompt" package.
	QueryInverseTable = "user_prompts"
	// QueryColumn is the table column denoting the query relation/edge.
	QueryColumn = "user_prompt_results"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "query_results"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "document_query_results"
)

// Columns holds all SQL columns for queryresult fields.
var Columns = []string{
	FieldID,
	FieldRank,
	FieldScore,
	FieldContentSnippet,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "query_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"document_query_results",
	"user_prompt_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the QueryResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByContentSnippet orders the results by the content_snippet field.
func ByContentSnippet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentSnippet, opts...).ToFunc()
}

// ByQueryField orders the results by query field.
func ByQueryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQueryStep(), sql.OrderByField(field, opts...))
	}
}

// ByDocumentField orders the results by document field.
func ByDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), sql.OrderByField(field, opts...))
	}
}
func newQueryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QueryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QueryTable, QueryColumn),
	)
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DocumentTable, DocumentColumn),
	)
}
