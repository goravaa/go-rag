// Code generated by ent, DO NOT EDIT.

package chunk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chunk type in the database.
	Label = "chunk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// EdgeEmbeddings holds the string denoting the embeddings edge name in mutations.
	EdgeEmbeddings = "embeddings"
	// Table holds the table name of the chunk in the database.
	Table = "chunks"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "chunks"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "document_chunks"
	// EmbeddingsTable is the table that holds the embeddings relation/edge.
	EmbeddingsTable = "embeddings"
	// EmbeddingsInverseTable is the table name for the Embedding entity.
	// It exists in this package in order to avoid circular dependency with the "embedding" package.
	EmbeddingsInverseTable = "embeddings"
	// EmbeddingsColumn is the table column denoting the embeddings relation/edge.
	EmbeddingsColumn = "chunk_embeddings"
)

// Columns holds all SQL columns for chunk fields.
var Columns = []string{
	FieldID,
	FieldIndex,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chunks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"document_chunks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Chunk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByDocumentField orders the results by document field.
func ByDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmbeddingsCount orders the results by embeddings count.
func ByEmbeddingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmbeddingsStep(), opts...)
	}
}

// ByEmbeddings orders the results by embeddings terms.
func ByEmbeddings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmbeddingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DocumentTable, DocumentColumn),
	)
}
func newEmbeddingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmbeddingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmbeddingsTable, EmbeddingsColumn),
	)
}
