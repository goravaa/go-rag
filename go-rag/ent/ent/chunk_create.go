// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/queryresult"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunkCreate is the builder for creating a Chunk entity.
type ChunkCreate struct {
	config
	mutation *ChunkMutation
	hooks    []Hook
}

// SetIndex sets the "index" field.
func (_c *ChunkCreate) SetIndex(v int) *ChunkCreate {
	_c.mutation.SetIndex(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *ChunkCreate) SetContent(v string) *ChunkCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetContentHash sets the "content_hash" field.
func (_c *ChunkCreate) SetContentHash(v string) *ChunkCreate {
	_c.mutation.SetContentHash(v)
	return _c
}

// SetNillableContentHash sets the "content_hash" field if the given value is not nil.
func (_c *ChunkCreate) SetNillableContentHash(v *string) *ChunkCreate {
	if v != nil {
		_c.SetContentHash(*v)
	}
	return _c
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (_c *ChunkCreate) SetDocumentID(id int) *ChunkCreate {
	_c.mutation.SetDocumentID(id)
	return _c
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (_c *ChunkCreate) SetNillableDocumentID(id *int) *ChunkCreate {
	if id != nil {
		_c = _c.SetDocumentID(*id)
	}
	return _c
}

// SetDocument sets the "document" edge to the Document entity.
func (_c *ChunkCreate) SetDocument(v *Document) *ChunkCreate {
	return _c.SetDocumentID(v.ID)
}

// AddQueryResultIDs adds the "query_results" edge to the QueryResult entity by IDs.
func (_c *ChunkCreate) AddQueryResultIDs(ids ...int) *ChunkCreate {
	_c.mutation.AddQueryResultIDs(ids...)
	return _c
}

// AddQueryResults adds the "query_results" edges to the QueryResult entity.
func (_c *ChunkCreate) AddQueryResults(v ...*QueryResult) *ChunkCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQueryResultIDs(ids...)
}

// Mutation returns the ChunkMutation object of the builder.
func (_c *ChunkCreate) Mutation() *ChunkMutation {
	return _c.mutation
}

// Save creates the Chunk in the database.
func (_c *ChunkCreate) Save(ctx context.Context) (*Chunk, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ChunkCreate) SaveX(ctx context.Context) *Chunk {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunkCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunkCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ChunkCreate) check() error {
	if _, ok := _c.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Chunk.index"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Chunk.content"`)}
	}
	return nil
}

func (_c *ChunkCreate) sqlSave(ctx context.Context) (*Chunk, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ChunkCreate) createSpec() (*Chunk, *sqlgraph.CreateSpec) {
	var (
		_node = &Chunk{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(chunk.Table, sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Index(); ok {
		_spec.SetField(chunk.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(chunk.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.ContentHash(); ok {
		_spec.SetField(chunk.FieldContentHash, field.TypeString, value)
		_node.ContentHash = value
	}
	if nodes := _c.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.DocumentTable,
			Columns: []string{chunk.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_chunks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QueryResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   chunk.QueryResultsTable,
			Columns: chunk.QueryResultsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChunkCreateBulk is the builder for creating many Chunk entities in bulk.
type ChunkCreateBulk struct {
	config
	err      error
	builders []*ChunkCreate
}

// Save creates the Chunk entities in the database.
func (_c *ChunkCreateBulk) Save(ctx context.Context) ([]*Chunk, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Chunk, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChunkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ChunkCreateBulk) SaveX(ctx context.Context) []*Chunk {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ChunkCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ChunkCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
