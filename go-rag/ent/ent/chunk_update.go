// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/embedding"
	"go-rag/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChunkUpdate is the builder for updating Chunk entities.
type ChunkUpdate struct {
	config
	hooks    []Hook
	mutation *ChunkMutation
}

// Where appends a list predicates to the ChunkUpdate builder.
func (_u *ChunkUpdate) Where(ps ...predicate.Chunk) *ChunkUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetIndex sets the "index" field.
func (_u *ChunkUpdate) SetIndex(v int) *ChunkUpdate {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *ChunkUpdate) SetNillableIndex(v *int) *ChunkUpdate {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *ChunkUpdate) AddIndex(v int) *ChunkUpdate {
	_u.mutation.AddIndex(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *ChunkUpdate) SetContent(v string) *ChunkUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ChunkUpdate) SetNillableContent(v *string) *ChunkUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (_u *ChunkUpdate) SetDocumentID(id int) *ChunkUpdate {
	_u.mutation.SetDocumentID(id)
	return _u
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (_u *ChunkUpdate) SetNillableDocumentID(id *int) *ChunkUpdate {
	if id != nil {
		_u = _u.SetDocumentID(*id)
	}
	return _u
}

// SetDocument sets the "document" edge to the Document entity.
func (_u *ChunkUpdate) SetDocument(v *Document) *ChunkUpdate {
	return _u.SetDocumentID(v.ID)
}

// AddEmbeddingIDs adds the "embeddings" edge to the Embedding entity by IDs.
func (_u *ChunkUpdate) AddEmbeddingIDs(ids ...int) *ChunkUpdate {
	_u.mutation.AddEmbeddingIDs(ids...)
	return _u
}

// AddEmbeddings adds the "embeddings" edges to the Embedding entity.
func (_u *ChunkUpdate) AddEmbeddings(v ...*Embedding) *ChunkUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmbeddingIDs(ids...)
}

// Mutation returns the ChunkMutation object of the builder.
func (_u *ChunkUpdate) Mutation() *ChunkMutation {
	return _u.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (_u *ChunkUpdate) ClearDocument() *ChunkUpdate {
	_u.mutation.ClearDocument()
	return _u
}

// ClearEmbeddings clears all "embeddings" edges to the Embedding entity.
func (_u *ChunkUpdate) ClearEmbeddings() *ChunkUpdate {
	_u.mutation.ClearEmbeddings()
	return _u
}

// RemoveEmbeddingIDs removes the "embeddings" edge to Embedding entities by IDs.
func (_u *ChunkUpdate) RemoveEmbeddingIDs(ids ...int) *ChunkUpdate {
	_u.mutation.RemoveEmbeddingIDs(ids...)
	return _u
}

// RemoveEmbeddings removes "embeddings" edges to Embedding entities.
func (_u *ChunkUpdate) RemoveEmbeddings(v ...*Embedding) *ChunkUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmbeddingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChunkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunkUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChunkUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunkUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ChunkUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chunk.Table, chunk.Columns, sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(chunk.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(chunk.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(chunk.FieldContent, field.TypeString, value)
	}
	if _u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.DocumentTable,
			Columns: []string{chunk.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.DocumentTable,
			Columns: []string{chunk.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmbeddingsIDs(); len(nodes) > 0 && !_u.mutation.EmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmbeddingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChunkUpdateOne is the builder for updating a single Chunk entity.
type ChunkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChunkMutation
}

// SetIndex sets the "index" field.
func (_u *ChunkUpdateOne) SetIndex(v int) *ChunkUpdateOne {
	_u.mutation.ResetIndex()
	_u.mutation.SetIndex(v)
	return _u
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (_u *ChunkUpdateOne) SetNillableIndex(v *int) *ChunkUpdateOne {
	if v != nil {
		_u.SetIndex(*v)
	}
	return _u
}

// AddIndex adds value to the "index" field.
func (_u *ChunkUpdateOne) AddIndex(v int) *ChunkUpdateOne {
	_u.mutation.AddIndex(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *ChunkUpdateOne) SetContent(v string) *ChunkUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *ChunkUpdateOne) SetNillableContent(v *string) *ChunkUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (_u *ChunkUpdateOne) SetDocumentID(id int) *ChunkUpdateOne {
	_u.mutation.SetDocumentID(id)
	return _u
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (_u *ChunkUpdateOne) SetNillableDocumentID(id *int) *ChunkUpdateOne {
	if id != nil {
		_u = _u.SetDocumentID(*id)
	}
	return _u
}

// SetDocument sets the "document" edge to the Document entity.
func (_u *ChunkUpdateOne) SetDocument(v *Document) *ChunkUpdateOne {
	return _u.SetDocumentID(v.ID)
}

// AddEmbeddingIDs adds the "embeddings" edge to the Embedding entity by IDs.
func (_u *ChunkUpdateOne) AddEmbeddingIDs(ids ...int) *ChunkUpdateOne {
	_u.mutation.AddEmbeddingIDs(ids...)
	return _u
}

// AddEmbeddings adds the "embeddings" edges to the Embedding entity.
func (_u *ChunkUpdateOne) AddEmbeddings(v ...*Embedding) *ChunkUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEmbeddingIDs(ids...)
}

// Mutation returns the ChunkMutation object of the builder.
func (_u *ChunkUpdateOne) Mutation() *ChunkMutation {
	return _u.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (_u *ChunkUpdateOne) ClearDocument() *ChunkUpdateOne {
	_u.mutation.ClearDocument()
	return _u
}

// ClearEmbeddings clears all "embeddings" edges to the Embedding entity.
func (_u *ChunkUpdateOne) ClearEmbeddings() *ChunkUpdateOne {
	_u.mutation.ClearEmbeddings()
	return _u
}

// RemoveEmbeddingIDs removes the "embeddings" edge to Embedding entities by IDs.
func (_u *ChunkUpdateOne) RemoveEmbeddingIDs(ids ...int) *ChunkUpdateOne {
	_u.mutation.RemoveEmbeddingIDs(ids...)
	return _u
}

// RemoveEmbeddings removes "embeddings" edges to Embedding entities.
func (_u *ChunkUpdateOne) RemoveEmbeddings(v ...*Embedding) *ChunkUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEmbeddingIDs(ids...)
}

// Where appends a list predicates to the ChunkUpdate builder.
func (_u *ChunkUpdateOne) Where(ps ...predicate.Chunk) *ChunkUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChunkUpdateOne) Select(field string, fields ...string) *ChunkUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Chunk entity.
func (_u *ChunkUpdateOne) Save(ctx context.Context) (*Chunk, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChunkUpdateOne) SaveX(ctx context.Context) *Chunk {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChunkUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChunkUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ChunkUpdateOne) sqlSave(ctx context.Context) (_node *Chunk, err error) {
	_spec := sqlgraph.NewUpdateSpec(chunk.Table, chunk.Columns, sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chunk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chunk.FieldID)
		for _, f := range fields {
			if !chunk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chunk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Index(); ok {
		_spec.SetField(chunk.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIndex(); ok {
		_spec.AddField(chunk.FieldIndex, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(chunk.FieldContent, field.TypeString, value)
	}
	if _u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.DocumentTable,
			Columns: []string{chunk.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chunk.DocumentTable,
			Columns: []string{chunk.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEmbeddingsIDs(); len(nodes) > 0 && !_u.mutation.EmbeddingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EmbeddingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chunk.EmbeddingsTable,
			Columns: []string{chunk.EmbeddingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chunk{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
