// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/user"
	"go-rag/ent/ent/userprompt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserPromptUpdate is the builder for updating UserPrompt entities.
type UserPromptUpdate struct {
	config
	hooks    []Hook
	mutation *UserPromptMutation
}

// Where appends a list predicates to the UserPromptUpdate builder.
func (_u *UserPromptUpdate) Where(ps ...predicate.UserPrompt) *UserPromptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetQueryText sets the "query_text" field.
func (_u *UserPromptUpdate) SetQueryText(v string) *UserPromptUpdate {
	_u.mutation.SetQueryText(v)
	return _u
}

// SetNillableQueryText sets the "query_text" field if the given value is not nil.
func (_u *UserPromptUpdate) SetNillableQueryText(v *string) *UserPromptUpdate {
	if v != nil {
		_u.SetQueryText(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserPromptUpdate) SetCreatedAt(v time.Time) *UserPromptUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserPromptUpdate) SetNillableCreatedAt(v *time.Time) *UserPromptUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserPromptUpdate) SetUserID(id uuid.UUID) *UserPromptUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *UserPromptUpdate) SetNillableUserID(id *uuid.UUID) *UserPromptUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserPromptUpdate) SetUser(v *User) *UserPromptUpdate {
	return _u.SetUserID(v.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *UserPromptUpdate) SetProjectID(id int) *UserPromptUpdate {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *UserPromptUpdate) SetNillableProjectID(id *int) *UserPromptUpdate {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *UserPromptUpdate) SetProject(v *Project) *UserPromptUpdate {
	return _u.SetProjectID(v.ID)
}

// AddResultIDs adds the "results" edge to the QueryResult entity by IDs.
func (_u *UserPromptUpdate) AddResultIDs(ids ...int) *UserPromptUpdate {
	_u.mutation.AddResultIDs(ids...)
	return _u
}

// AddResults adds the "results" edges to the QueryResult entity.
func (_u *UserPromptUpdate) AddResults(v ...*QueryResult) *UserPromptUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddResultIDs(ids...)
}

// Mutation returns the UserPromptMutation object of the builder.
func (_u *UserPromptUpdate) Mutation() *UserPromptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserPromptUpdate) ClearUser() *UserPromptUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *UserPromptUpdate) ClearProject() *UserPromptUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearResults clears all "results" edges to the QueryResult entity.
func (_u *UserPromptUpdate) ClearResults() *UserPromptUpdate {
	_u.mutation.ClearResults()
	return _u
}

// RemoveResultIDs removes the "results" edge to QueryResult entities by IDs.
func (_u *UserPromptUpdate) RemoveResultIDs(ids ...int) *UserPromptUpdate {
	_u.mutation.RemoveResultIDs(ids...)
	return _u
}

// RemoveResults removes "results" edges to QueryResult entities.
func (_u *UserPromptUpdate) RemoveResults(v ...*QueryResult) *UserPromptUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserPromptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPromptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserPromptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPromptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserPromptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprompt.Table, userprompt.Columns, sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.QueryText(); ok {
		_spec.SetField(userprompt.FieldQueryText, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(userprompt.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.UserTable,
			Columns: []string{userprompt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.UserTable,
			Columns: []string{userprompt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.ProjectTable,
			Columns: []string{userprompt.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.ProjectTable,
			Columns: []string{userprompt.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedResultsIDs(); len(nodes) > 0 && !_u.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserPromptUpdateOne is the builder for updating a single UserPrompt entity.
type UserPromptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPromptMutation
}

// SetQueryText sets the "query_text" field.
func (_u *UserPromptUpdateOne) SetQueryText(v string) *UserPromptUpdateOne {
	_u.mutation.SetQueryText(v)
	return _u
}

// SetNillableQueryText sets the "query_text" field if the given value is not nil.
func (_u *UserPromptUpdateOne) SetNillableQueryText(v *string) *UserPromptUpdateOne {
	if v != nil {
		_u.SetQueryText(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserPromptUpdateOne) SetCreatedAt(v time.Time) *UserPromptUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserPromptUpdateOne) SetNillableCreatedAt(v *time.Time) *UserPromptUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserPromptUpdateOne) SetUserID(id uuid.UUID) *UserPromptUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *UserPromptUpdateOne) SetNillableUserID(id *uuid.UUID) *UserPromptUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserPromptUpdateOne) SetUser(v *User) *UserPromptUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *UserPromptUpdateOne) SetProjectID(id int) *UserPromptUpdateOne {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *UserPromptUpdateOne) SetNillableProjectID(id *int) *UserPromptUpdateOne {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *UserPromptUpdateOne) SetProject(v *Project) *UserPromptUpdateOne {
	return _u.SetProjectID(v.ID)
}

// AddResultIDs adds the "results" edge to the QueryResult entity by IDs.
func (_u *UserPromptUpdateOne) AddResultIDs(ids ...int) *UserPromptUpdateOne {
	_u.mutation.AddResultIDs(ids...)
	return _u
}

// AddResults adds the "results" edges to the QueryResult entity.
func (_u *UserPromptUpdateOne) AddResults(v ...*QueryResult) *UserPromptUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddResultIDs(ids...)
}

// Mutation returns the UserPromptMutation object of the builder.
func (_u *UserPromptUpdateOne) Mutation() *UserPromptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserPromptUpdateOne) ClearUser() *UserPromptUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *UserPromptUpdateOne) ClearProject() *UserPromptUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearResults clears all "results" edges to the QueryResult entity.
func (_u *UserPromptUpdateOne) ClearResults() *UserPromptUpdateOne {
	_u.mutation.ClearResults()
	return _u
}

// RemoveResultIDs removes the "results" edge to QueryResult entities by IDs.
func (_u *UserPromptUpdateOne) RemoveResultIDs(ids ...int) *UserPromptUpdateOne {
	_u.mutation.RemoveResultIDs(ids...)
	return _u
}

// RemoveResults removes "results" edges to QueryResult entities.
func (_u *UserPromptUpdateOne) RemoveResults(v ...*QueryResult) *UserPromptUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveResultIDs(ids...)
}

// Where appends a list predicates to the UserPromptUpdate builder.
func (_u *UserPromptUpdateOne) Where(ps ...predicate.UserPrompt) *UserPromptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserPromptUpdateOne) Select(field string, fields ...string) *UserPromptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserPrompt entity.
func (_u *UserPromptUpdateOne) Save(ctx context.Context) (*UserPrompt, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPromptUpdateOne) SaveX(ctx context.Context) *UserPrompt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserPromptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPromptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserPromptUpdateOne) sqlSave(ctx context.Context) (_node *UserPrompt, err error) {
	_spec := sqlgraph.NewUpdateSpec(userprompt.Table, userprompt.Columns, sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPrompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userprompt.FieldID)
		for _, f := range fields {
			if !userprompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userprompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.QueryText(); ok {
		_spec.SetField(userprompt.FieldQueryText, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(userprompt.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.UserTable,
			Columns: []string{userprompt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.UserTable,
			Columns: []string{userprompt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.ProjectTable,
			Columns: []string{userprompt.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userprompt.ProjectTable,
			Columns: []string{userprompt.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedResultsIDs(); len(nodes) > 0 && !_u.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userprompt.ResultsTable,
			Columns: []string{userprompt.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPrompt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
