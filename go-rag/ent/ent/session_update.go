// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/session"
	"go-rag/ent/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where appends a list predicates to the SessionUpdate builder.
func (_u *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSessionID sets the "session_id" field.
func (_u *SessionUpdate) SetSessionID(v uuid.UUID) *SessionUpdate {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableSessionID(v *uuid.UUID) *SessionUpdate {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// SetSessionsUserids sets the "sessions_userids" field.
func (_u *SessionUpdate) SetSessionsUserids(v uuid.UUID) *SessionUpdate {
	_u.mutation.SetSessionsUserids(v)
	return _u
}

// SetNillableSessionsUserids sets the "sessions_userids" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableSessionsUserids(v *uuid.UUID) *SessionUpdate {
	if v != nil {
		_u.SetSessionsUserids(*v)
	}
	return _u
}

// SetSessionType sets the "session_type" field.
func (_u *SessionUpdate) SetSessionType(v session.SessionType) *SessionUpdate {
	_u.mutation.SetSessionType(v)
	return _u
}

// SetNillableSessionType sets the "session_type" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableSessionType(v *session.SessionType) *SessionUpdate {
	if v != nil {
		_u.SetSessionType(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *SessionUpdate) SetAccessToken(v string) *SessionUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableAccessToken(v *string) *SessionUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *SessionUpdate) SetRefreshToken(v string) *SessionUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableRefreshToken(v *string) *SessionUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *SessionUpdate) ClearRefreshToken() *SessionUpdate {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *SessionUpdate) SetDeviceName(v string) *SessionUpdate {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableDeviceName(v *string) *SessionUpdate {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *SessionUpdate) ClearDeviceName() *SessionUpdate {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetLastSyncTime sets the "last_sync_time" field.
func (_u *SessionUpdate) SetLastSyncTime(v time.Time) *SessionUpdate {
	_u.mutation.SetLastSyncTime(v)
	return _u
}

// SetNillableLastSyncTime sets the "last_sync_time" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableLastSyncTime(v *time.Time) *SessionUpdate {
	if v != nil {
		_u.SetLastSyncTime(*v)
	}
	return _u
}

// ClearLastSyncTime clears the value of the "last_sync_time" field.
func (_u *SessionUpdate) ClearLastSyncTime() *SessionUpdate {
	_u.mutation.ClearLastSyncTime()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SessionUpdate) SetCreatedAt(v time.Time) *SessionUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableCreatedAt(v *time.Time) *SessionUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *SessionUpdate) SetExpiresAt(v time.Time) *SessionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableExpiresAt(v *time.Time) *SessionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *SessionUpdate) SetRevokedAt(v time.Time) *SessionUpdate {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableRevokedAt(v *time.Time) *SessionUpdate {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *SessionUpdate) ClearRevokedAt() *SessionUpdate {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *SessionUpdate) SetIPAddress(v string) *SessionUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableIPAddress(v *string) *SessionUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *SessionUpdate) ClearIPAddress() *SessionUpdate {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *SessionUpdate) SetUserAgent(v string) *SessionUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *SessionUpdate) SetNillableUserAgent(v *string) *SessionUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *SessionUpdate) ClearUserAgent() *SessionUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SessionUpdate) SetMetadata(v map[string]interface{}) *SessionUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SessionUpdate) ClearMetadata() *SessionUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SessionUpdate) SetUserID(id uuid.UUID) *SessionUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SessionUpdate) SetUser(v *User) *SessionUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (_u *SessionUpdate) Mutation() *SessionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SessionUpdate) ClearUser() *SessionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SessionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SessionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SessionUpdate) check() error {
	if v, ok := _u.mutation.SessionType(); ok {
		if err := session.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Session.session_type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Session.user"`)
	}
	return nil
}

func (_u *SessionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(session.FieldSessionID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.SessionType(); ok {
		_spec.SetField(session.FieldSessionType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(session.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(session.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(session.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(session.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(session.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.LastSyncTime(); ok {
		_spec.SetField(session.FieldLastSyncTime, field.TypeTime, value)
	}
	if _u.mutation.LastSyncTimeCleared() {
		_spec.ClearField(session.FieldLastSyncTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(session.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(session.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(session.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(session.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(session.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(session.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionMutation
}

// SetSessionID sets the "session_id" field.
func (_u *SessionUpdateOne) SetSessionID(v uuid.UUID) *SessionUpdateOne {
	_u.mutation.SetSessionID(v)
	return _u
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableSessionID(v *uuid.UUID) *SessionUpdateOne {
	if v != nil {
		_u.SetSessionID(*v)
	}
	return _u
}

// SetSessionsUserids sets the "sessions_userids" field.
func (_u *SessionUpdateOne) SetSessionsUserids(v uuid.UUID) *SessionUpdateOne {
	_u.mutation.SetSessionsUserids(v)
	return _u
}

// SetNillableSessionsUserids sets the "sessions_userids" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableSessionsUserids(v *uuid.UUID) *SessionUpdateOne {
	if v != nil {
		_u.SetSessionsUserids(*v)
	}
	return _u
}

// SetSessionType sets the "session_type" field.
func (_u *SessionUpdateOne) SetSessionType(v session.SessionType) *SessionUpdateOne {
	_u.mutation.SetSessionType(v)
	return _u
}

// SetNillableSessionType sets the "session_type" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableSessionType(v *session.SessionType) *SessionUpdateOne {
	if v != nil {
		_u.SetSessionType(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *SessionUpdateOne) SetAccessToken(v string) *SessionUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableAccessToken(v *string) *SessionUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *SessionUpdateOne) SetRefreshToken(v string) *SessionUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableRefreshToken(v *string) *SessionUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *SessionUpdateOne) ClearRefreshToken() *SessionUpdateOne {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *SessionUpdateOne) SetDeviceName(v string) *SessionUpdateOne {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableDeviceName(v *string) *SessionUpdateOne {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *SessionUpdateOne) ClearDeviceName() *SessionUpdateOne {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetLastSyncTime sets the "last_sync_time" field.
func (_u *SessionUpdateOne) SetLastSyncTime(v time.Time) *SessionUpdateOne {
	_u.mutation.SetLastSyncTime(v)
	return _u
}

// SetNillableLastSyncTime sets the "last_sync_time" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableLastSyncTime(v *time.Time) *SessionUpdateOne {
	if v != nil {
		_u.SetLastSyncTime(*v)
	}
	return _u
}

// ClearLastSyncTime clears the value of the "last_sync_time" field.
func (_u *SessionUpdateOne) ClearLastSyncTime() *SessionUpdateOne {
	_u.mutation.ClearLastSyncTime()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SessionUpdateOne) SetCreatedAt(v time.Time) *SessionUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableCreatedAt(v *time.Time) *SessionUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *SessionUpdateOne) SetExpiresAt(v time.Time) *SessionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableExpiresAt(v *time.Time) *SessionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetRevokedAt sets the "revoked_at" field.
func (_u *SessionUpdateOne) SetRevokedAt(v time.Time) *SessionUpdateOne {
	_u.mutation.SetRevokedAt(v)
	return _u
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableRevokedAt(v *time.Time) *SessionUpdateOne {
	if v != nil {
		_u.SetRevokedAt(*v)
	}
	return _u
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (_u *SessionUpdateOne) ClearRevokedAt() *SessionUpdateOne {
	_u.mutation.ClearRevokedAt()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *SessionUpdateOne) SetIPAddress(v string) *SessionUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableIPAddress(v *string) *SessionUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (_u *SessionUpdateOne) ClearIPAddress() *SessionUpdateOne {
	_u.mutation.ClearIPAddress()
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *SessionUpdateOne) SetUserAgent(v string) *SessionUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *SessionUpdateOne) SetNillableUserAgent(v *string) *SessionUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *SessionUpdateOne) ClearUserAgent() *SessionUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SessionUpdateOne) SetMetadata(v map[string]interface{}) *SessionUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SessionUpdateOne) ClearMetadata() *SessionUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *SessionUpdateOne) SetUserID(id uuid.UUID) *SessionUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *SessionUpdateOne) SetUser(v *User) *SessionUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (_u *SessionUpdateOne) Mutation() *SessionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *SessionUpdateOne) ClearUser() *SessionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the SessionUpdate builder.
func (_u *SessionUpdateOne) Where(ps ...predicate.Session) *SessionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SessionUpdateOne) Select(field string, fields ...string) *SessionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Session entity.
func (_u *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SessionUpdateOne) check() error {
	if v, ok := _u.mutation.SessionType(); ok {
		if err := session.SessionTypeValidator(v); err != nil {
			return &ValidationError{Name: "session_type", err: fmt.Errorf(`ent: validator failed for field "Session.session_type": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Session.user"`)
	}
	return nil
}

func (_u *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Session.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for _, f := range fields {
			if !session.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SessionID(); ok {
		_spec.SetField(session.FieldSessionID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.SessionType(); ok {
		_spec.SetField(session.FieldSessionType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(session.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(session.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(session.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(session.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(session.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.LastSyncTime(); ok {
		_spec.SetField(session.FieldLastSyncTime, field.TypeTime, value)
	}
	if _u.mutation.LastSyncTimeCleared() {
		_spec.ClearField(session.FieldLastSyncTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RevokedAt(); ok {
		_spec.SetField(session.FieldRevokedAt, field.TypeTime, value)
	}
	if _u.mutation.RevokedAtCleared() {
		_spec.ClearField(session.FieldRevokedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
	}
	if _u.mutation.IPAddressCleared() {
		_spec.ClearField(session.FieldIPAddress, field.TypeString)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(session.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(session.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(session.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Session{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
