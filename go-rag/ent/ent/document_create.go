// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *DocumentCreate) SetName(v string) *DocumentCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetStoragePath sets the "storage_path" field.
func (_c *DocumentCreate) SetStoragePath(v string) *DocumentCreate {
	_c.mutation.SetStoragePath(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *DocumentCreate) SetStatus(v string) *DocumentCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableStatus(v *string) *DocumentCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DocumentCreate) SetCreatedAt(v time.Time) *DocumentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DocumentCreate) SetNillableCreatedAt(v *time.Time) *DocumentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_c *DocumentCreate) SetProjectID(id int) *DocumentCreate {
	_c.mutation.SetProjectID(id)
	return _c
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_c *DocumentCreate) SetNillableProjectID(id *int) *DocumentCreate {
	if id != nil {
		_c = _c.SetProjectID(*id)
	}
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *DocumentCreate) SetProject(v *Project) *DocumentCreate {
	return _c.SetProjectID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_c *DocumentCreate) AddChunkIDs(ids ...int) *DocumentCreate {
	_c.mutation.AddChunkIDs(ids...)
	return _c
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_c *DocumentCreate) AddChunks(v ...*Chunk) *DocumentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChunkIDs(ids...)
}

// AddQueryResultIDs adds the "query_results" edge to the QueryResult entity by IDs.
func (_c *DocumentCreate) AddQueryResultIDs(ids ...int) *DocumentCreate {
	_c.mutation.AddQueryResultIDs(ids...)
	return _c
}

// AddQueryResults adds the "query_results" edges to the QueryResult entity.
func (_c *DocumentCreate) AddQueryResults(v ...*QueryResult) *DocumentCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQueryResultIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (_c *DocumentCreate) Mutation() *DocumentMutation {
	return _c.mutation
}

// Save creates the Document in the database.
func (_c *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DocumentCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := document.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := document.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DocumentCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Document.name"`)}
	}
	if _, ok := _c.mutation.StoragePath(); !ok {
		return &ValidationError{Name: "storage_path", err: errors.New(`ent: missing required field "Document.storage_path"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Document.status"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Document.created_at"`)}
	}
	return nil
}

func (_c *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.StoragePath(); ok {
		_spec.SetField(document.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(document.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ProjectTable,
			Columns: []string{document.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QueryResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
}

// Save creates the Document entities in the database.
func (_c *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Document, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
