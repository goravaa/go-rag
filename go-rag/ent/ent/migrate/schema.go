// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChunksColumns holds the columns for the "chunks" table.
	ChunksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "index", Type: field.TypeInt},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "content_hash", Type: field.TypeString, Nullable: true},
		{Name: "document_chunks", Type: field.TypeInt, Nullable: true},
	}
	// ChunksTable holds the schema information for the "chunks" table.
	ChunksTable = &schema.Table{
		Name:       "chunks",
		Columns:    ChunksColumns,
		PrimaryKey: []*schema.Column{ChunksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chunks_documents_chunks",
				Columns:    []*schema.Column{ChunksColumns[4]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "chunk_content_hash",
				Unique:  false,
				Columns: []*schema.Column{ChunksColumns[3]},
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "content_hash", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "uploaded"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "project_documents", Type: field.TypeInt, Nullable: true},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "documents_projects_documents",
				Columns:    []*schema.Column{DocumentsColumns[6]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "document_content_hash",
				Unique:  false,
				Columns: []*schema.Column{DocumentsColumns[3]},
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_projects", Type: field.TypeUUID, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "projects_users_projects",
				Columns:    []*schema.Column{ProjectsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// QueryResultsColumns holds the columns for the "query_results" table.
	QueryResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rank", Type: field.TypeInt},
		{Name: "score", Type: field.TypeFloat64},
		{Name: "content_snippet", Type: field.TypeString, Size: 2147483647},
		{Name: "user_prompt_results", Type: field.TypeInt, Nullable: true},
	}
	// QueryResultsTable holds the schema information for the "query_results" table.
	QueryResultsTable = &schema.Table{
		Name:       "query_results",
		Columns:    QueryResultsColumns,
		PrimaryKey: []*schema.Column{QueryResultsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "query_results_user_prompts_results",
				Columns:    []*schema.Column{QueryResultsColumns[4]},
				RefColumns: []*schema.Column{UserPromptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SecurityQuestionsColumns holds the columns for the "security_questions" table.
	SecurityQuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "question", Type: field.TypeString},
		{Name: "answer", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_security_questions", Type: field.TypeUUID},
	}
	// SecurityQuestionsTable holds the schema information for the "security_questions" table.
	SecurityQuestionsTable = &schema.Table{
		Name:       "security_questions",
		Columns:    SecurityQuestionsColumns,
		PrimaryKey: []*schema.Column{SecurityQuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "security_questions_users_security_questions",
				Columns:    []*schema.Column{SecurityQuestionsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "session_id", Type: field.TypeUUID, Unique: true},
		{Name: "session_type", Type: field.TypeEnum, Enums: []string{"auth", "sync"}},
		{Name: "access_token", Type: field.TypeString, Unique: true},
		{Name: "refresh_token", Type: field.TypeString, Nullable: true},
		{Name: "device_name", Type: field.TypeString, Nullable: true},
		{Name: "last_sync_time", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "revoked_at", Type: field.TypeTime, Nullable: true},
		{Name: "ip_address", Type: field.TypeString, Nullable: true},
		{Name: "user_agent", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "sessions_userids", Type: field.TypeUUID},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "email_confirmed", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserPromptsColumns holds the columns for the "user_prompts" table.
	UserPromptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "query_text", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "project_queries", Type: field.TypeInt, Nullable: true},
		{Name: "user_queries", Type: field.TypeUUID, Nullable: true},
	}
	// UserPromptsTable holds the schema information for the "user_prompts" table.
	UserPromptsTable = &schema.Table{
		Name:       "user_prompts",
		Columns:    UserPromptsColumns,
		PrimaryKey: []*schema.Column{UserPromptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_prompts_projects_queries",
				Columns:    []*schema.Column{UserPromptsColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_prompts_users_queries",
				Columns:    []*schema.Column{UserPromptsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChunkQueryResultsColumns holds the columns for the "chunk_query_results" table.
	ChunkQueryResultsColumns = []*schema.Column{
		{Name: "chunk_id", Type: field.TypeInt},
		{Name: "query_result_id", Type: field.TypeInt},
	}
	// ChunkQueryResultsTable holds the schema information for the "chunk_query_results" table.
	ChunkQueryResultsTable = &schema.Table{
		Name:       "chunk_query_results",
		Columns:    ChunkQueryResultsColumns,
		PrimaryKey: []*schema.Column{ChunkQueryResultsColumns[0], ChunkQueryResultsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chunk_query_results_chunk_id",
				Columns:    []*schema.Column{ChunkQueryResultsColumns[0]},
				RefColumns: []*schema.Column{ChunksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "chunk_query_results_query_result_id",
				Columns:    []*schema.Column{ChunkQueryResultsColumns[1]},
				RefColumns: []*schema.Column{QueryResultsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChunksTable,
		DocumentsTable,
		ProjectsTable,
		QueryResultsTable,
		SecurityQuestionsTable,
		SessionsTable,
		UsersTable,
		UserPromptsTable,
		ChunkQueryResultsTable,
	}
)

func init() {
	ChunksTable.ForeignKeys[0].RefTable = DocumentsTable
	DocumentsTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectsTable.ForeignKeys[0].RefTable = UsersTable
	QueryResultsTable.ForeignKeys[0].RefTable = UserPromptsTable
	SecurityQuestionsTable.ForeignKeys[0].RefTable = UsersTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	UserPromptsTable.ForeignKeys[0].RefTable = ProjectsTable
	UserPromptsTable.ForeignKeys[1].RefTable = UsersTable
	ChunkQueryResultsTable.ForeignKeys[0].RefTable = ChunksTable
	ChunkQueryResultsTable.ForeignKeys[1].RefTable = QueryResultsTable
}
