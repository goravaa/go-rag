// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Chunk is the model entity for the Chunk schema.
type Chunk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// ContentHash holds the value of the "content_hash" field.
	ContentHash string `json:"content_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChunkQuery when eager-loading is set.
	Edges           ChunkEdges `json:"edges"`
	document_chunks *int
	selectValues    sql.SelectValues
}

// ChunkEdges holds the relations/edges for other nodes in the graph.
type ChunkEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// QueryResults holds the value of the query_results edge.
	QueryResults []*QueryResult `json:"query_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChunkEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// QueryResultsOrErr returns the QueryResults value or an error if the edge
// was not loaded in eager-loading.
func (e ChunkEdges) QueryResultsOrErr() ([]*QueryResult, error) {
	if e.loadedTypes[1] {
		return e.QueryResults, nil
	}
	return nil, &NotLoadedError{edge: "query_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chunk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chunk.FieldID, chunk.FieldIndex:
			values[i] = new(sql.NullInt64)
		case chunk.FieldContent, chunk.FieldContentHash:
			values[i] = new(sql.NullString)
		case chunk.ForeignKeys[0]: // document_chunks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chunk fields.
func (_m *Chunk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chunk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case chunk.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				_m.Index = int(value.Int64)
			}
		case chunk.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case chunk.FieldContentHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_hash", values[i])
			} else if value.Valid {
				_m.ContentHash = value.String
			}
		case chunk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field document_chunks", value)
			} else if value.Valid {
				_m.document_chunks = new(int)
				*_m.document_chunks = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chunk.
// This includes values selected through modifiers, order, etc.
func (_m *Chunk) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the Chunk entity.
func (_m *Chunk) QueryDocument() *DocumentQuery {
	return NewChunkClient(_m.config).QueryDocument(_m)
}

// QueryQueryResults queries the "query_results" edge of the Chunk entity.
func (_m *Chunk) QueryQueryResults() *QueryResultQuery {
	return NewChunkClient(_m.config).QueryQueryResults(_m)
}

// Update returns a builder for updating this Chunk.
// Note that you need to call Chunk.Unwrap() before calling this method if this Chunk
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Chunk) Update() *ChunkUpdateOne {
	return NewChunkClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Chunk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Chunk) Unwrap() *Chunk {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chunk is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Chunk) String() string {
	var builder strings.Builder
	builder.WriteString("Chunk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", _m.Index))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("content_hash=")
	builder.WriteString(_m.ContentHash)
	builder.WriteByte(')')
	return builder.String()
}

// Chunks is a parsable slice of Chunk.
type Chunks []*Chunk
