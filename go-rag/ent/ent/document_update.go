// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/document"
	"go-rag/ent/ent/predicate"
	"go-rag/ent/ent/project"
	"go-rag/ent/ent/queryresult"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (_u *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *DocumentUpdate) SetName(v string) *DocumentUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableName(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *DocumentUpdate) SetStoragePath(v string) *DocumentUpdate {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableStoragePath(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *DocumentUpdate) SetStatus(v string) *DocumentUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableStatus(v *string) *DocumentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DocumentUpdate) SetCreatedAt(v time.Time) *DocumentUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DocumentUpdate) SetNillableCreatedAt(v *time.Time) *DocumentUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *DocumentUpdate) SetProjectID(id int) *DocumentUpdate {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *DocumentUpdate) SetNillableProjectID(id *int) *DocumentUpdate {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *DocumentUpdate) SetProject(v *Project) *DocumentUpdate {
	return _u.SetProjectID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_u *DocumentUpdate) AddChunkIDs(ids ...int) *DocumentUpdate {
	_u.mutation.AddChunkIDs(ids...)
	return _u
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_u *DocumentUpdate) AddChunks(v ...*Chunk) *DocumentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChunkIDs(ids...)
}

// AddQueryResultIDs adds the "query_results" edge to the QueryResult entity by IDs.
func (_u *DocumentUpdate) AddQueryResultIDs(ids ...int) *DocumentUpdate {
	_u.mutation.AddQueryResultIDs(ids...)
	return _u
}

// AddQueryResults adds the "query_results" edges to the QueryResult entity.
func (_u *DocumentUpdate) AddQueryResults(v ...*QueryResult) *DocumentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQueryResultIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (_u *DocumentUpdate) Mutation() *DocumentMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *DocumentUpdate) ClearProject() *DocumentUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearChunks clears all "chunks" edges to the Chunk entity.
func (_u *DocumentUpdate) ClearChunks() *DocumentUpdate {
	_u.mutation.ClearChunks()
	return _u
}

// RemoveChunkIDs removes the "chunks" edge to Chunk entities by IDs.
func (_u *DocumentUpdate) RemoveChunkIDs(ids ...int) *DocumentUpdate {
	_u.mutation.RemoveChunkIDs(ids...)
	return _u
}

// RemoveChunks removes "chunks" edges to Chunk entities.
func (_u *DocumentUpdate) RemoveChunks(v ...*Chunk) *DocumentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChunkIDs(ids...)
}

// ClearQueryResults clears all "query_results" edges to the QueryResult entity.
func (_u *DocumentUpdate) ClearQueryResults() *DocumentUpdate {
	_u.mutation.ClearQueryResults()
	return _u
}

// RemoveQueryResultIDs removes the "query_results" edge to QueryResult entities by IDs.
func (_u *DocumentUpdate) RemoveQueryResultIDs(ids ...int) *DocumentUpdate {
	_u.mutation.RemoveQueryResultIDs(ids...)
	return _u
}

// RemoveQueryResults removes "query_results" edges to QueryResult entities.
func (_u *DocumentUpdate) RemoveQueryResults(v ...*QueryResult) *DocumentUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQueryResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DocumentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(document.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(document.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ProjectTable,
			Columns: []string{document.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ProjectTable,
			Columns: []string{document.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChunksIDs(); len(nodes) > 0 && !_u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueryResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQueryResultsIDs(); len(nodes) > 0 && !_u.mutation.QueryResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueryResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetName sets the "name" field.
func (_u *DocumentUpdateOne) SetName(v string) *DocumentUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableName(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *DocumentUpdateOne) SetStoragePath(v string) *DocumentUpdateOne {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableStoragePath(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *DocumentUpdateOne) SetStatus(v string) *DocumentUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableStatus(v *string) *DocumentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DocumentUpdateOne) SetCreatedAt(v time.Time) *DocumentUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableCreatedAt(v *time.Time) *DocumentUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *DocumentUpdateOne) SetProjectID(id int) *DocumentUpdateOne {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *DocumentUpdateOne) SetNillableProjectID(id *int) *DocumentUpdateOne {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *DocumentUpdateOne) SetProject(v *Project) *DocumentUpdateOne {
	return _u.SetProjectID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_u *DocumentUpdateOne) AddChunkIDs(ids ...int) *DocumentUpdateOne {
	_u.mutation.AddChunkIDs(ids...)
	return _u
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_u *DocumentUpdateOne) AddChunks(v ...*Chunk) *DocumentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChunkIDs(ids...)
}

// AddQueryResultIDs adds the "query_results" edge to the QueryResult entity by IDs.
func (_u *DocumentUpdateOne) AddQueryResultIDs(ids ...int) *DocumentUpdateOne {
	_u.mutation.AddQueryResultIDs(ids...)
	return _u
}

// AddQueryResults adds the "query_results" edges to the QueryResult entity.
func (_u *DocumentUpdateOne) AddQueryResults(v ...*QueryResult) *DocumentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQueryResultIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (_u *DocumentUpdateOne) Mutation() *DocumentMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *DocumentUpdateOne) ClearProject() *DocumentUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearChunks clears all "chunks" edges to the Chunk entity.
func (_u *DocumentUpdateOne) ClearChunks() *DocumentUpdateOne {
	_u.mutation.ClearChunks()
	return _u
}

// RemoveChunkIDs removes the "chunks" edge to Chunk entities by IDs.
func (_u *DocumentUpdateOne) RemoveChunkIDs(ids ...int) *DocumentUpdateOne {
	_u.mutation.RemoveChunkIDs(ids...)
	return _u
}

// RemoveChunks removes "chunks" edges to Chunk entities.
func (_u *DocumentUpdateOne) RemoveChunks(v ...*Chunk) *DocumentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChunkIDs(ids...)
}

// ClearQueryResults clears all "query_results" edges to the QueryResult entity.
func (_u *DocumentUpdateOne) ClearQueryResults() *DocumentUpdateOne {
	_u.mutation.ClearQueryResults()
	return _u
}

// RemoveQueryResultIDs removes the "query_results" edge to QueryResult entities by IDs.
func (_u *DocumentUpdateOne) RemoveQueryResultIDs(ids ...int) *DocumentUpdateOne {
	_u.mutation.RemoveQueryResultIDs(ids...)
	return _u
}

// RemoveQueryResults removes "query_results" edges to QueryResult entities.
func (_u *DocumentUpdateOne) RemoveQueryResults(v ...*QueryResult) *DocumentUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQueryResultIDs(ids...)
}

// Where appends a list predicates to the DocumentUpdate builder.
func (_u *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Document entity.
func (_u *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(document.FieldStoragePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(document.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ProjectTable,
			Columns: []string{document.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ProjectTable,
			Columns: []string{document.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChunksIDs(); len(nodes) > 0 && !_u.mutation.ChunksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.ChunksTable,
			Columns: []string{document.ChunksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueryResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQueryResultsIDs(); len(nodes) > 0 && !_u.mutation.QueryResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueryResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   document.QueryResultsTable,
			Columns: []string{document.QueryResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Document{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
