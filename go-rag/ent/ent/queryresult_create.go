// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-rag/ent/ent/chunk"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/userprompt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QueryResultCreate is the builder for creating a QueryResult entity.
type QueryResultCreate struct {
	config
	mutation *QueryResultMutation
	hooks    []Hook
}

// SetRank sets the "rank" field.
func (_c *QueryResultCreate) SetRank(v int) *QueryResultCreate {
	_c.mutation.SetRank(v)
	return _c
}

// SetScore sets the "score" field.
func (_c *QueryResultCreate) SetScore(v float64) *QueryResultCreate {
	_c.mutation.SetScore(v)
	return _c
}

// SetContentSnippet sets the "content_snippet" field.
func (_c *QueryResultCreate) SetContentSnippet(v string) *QueryResultCreate {
	_c.mutation.SetContentSnippet(v)
	return _c
}

// SetQueryID sets the "query" edge to the UserPrompt entity by ID.
func (_c *QueryResultCreate) SetQueryID(id int) *QueryResultCreate {
	_c.mutation.SetQueryID(id)
	return _c
}

// SetNillableQueryID sets the "query" edge to the UserPrompt entity by ID if the given value is not nil.
func (_c *QueryResultCreate) SetNillableQueryID(id *int) *QueryResultCreate {
	if id != nil {
		_c = _c.SetQueryID(*id)
	}
	return _c
}

// SetQuery sets the "query" edge to the UserPrompt entity.
func (_c *QueryResultCreate) SetQuery(v *UserPrompt) *QueryResultCreate {
	return _c.SetQueryID(v.ID)
}

// AddChunkIDs adds the "chunks" edge to the Chunk entity by IDs.
func (_c *QueryResultCreate) AddChunkIDs(ids ...int) *QueryResultCreate {
	_c.mutation.AddChunkIDs(ids...)
	return _c
}

// AddChunks adds the "chunks" edges to the Chunk entity.
func (_c *QueryResultCreate) AddChunks(v ...*Chunk) *QueryResultCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChunkIDs(ids...)
}

// Mutation returns the QueryResultMutation object of the builder.
func (_c *QueryResultCreate) Mutation() *QueryResultMutation {
	return _c.mutation
}

// Save creates the QueryResult in the database.
func (_c *QueryResultCreate) Save(ctx context.Context) (*QueryResult, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *QueryResultCreate) SaveX(ctx context.Context) *QueryResult {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QueryResultCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QueryResultCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *QueryResultCreate) check() error {
	if _, ok := _c.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "QueryResult.rank"`)}
	}
	if _, ok := _c.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "QueryResult.score"`)}
	}
	if _, ok := _c.mutation.ContentSnippet(); !ok {
		return &ValidationError{Name: "content_snippet", err: errors.New(`ent: missing required field "QueryResult.content_snippet"`)}
	}
	return nil
}

func (_c *QueryResultCreate) sqlSave(ctx context.Context) (*QueryResult, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *QueryResultCreate) createSpec() (*QueryResult, *sqlgraph.CreateSpec) {
	var (
		_node = &QueryResult{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(queryresult.Table, sqlgraph.NewFieldSpec(queryresult.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Rank(); ok {
		_spec.SetField(queryresult.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if value, ok := _c.mutation.Score(); ok {
		_spec.SetField(queryresult.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := _c.mutation.ContentSnippet(); ok {
		_spec.SetField(queryresult.FieldContentSnippet, field.TypeString, value)
		_node.ContentSnippet = value
	}
	if nodes := _c.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   queryresult.QueryTable,
			Columns: []string{queryresult.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userprompt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_prompt_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChunksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   queryresult.ChunksTable,
			Columns: queryresult.ChunksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chunk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QueryResultCreateBulk is the builder for creating many QueryResult entities in bulk.
type QueryResultCreateBulk struct {
	config
	err      error
	builders []*QueryResultCreate
}

// Save creates the QueryResult entities in the database.
func (_c *QueryResultCreateBulk) Save(ctx context.Context) ([]*QueryResult, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*QueryResult, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QueryResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *QueryResultCreateBulk) SaveX(ctx context.Context) []*QueryResult {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QueryResultCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QueryResultCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
