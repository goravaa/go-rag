// Code generated by ent, DO NOT EDIT.

package chunk

import (
	"go-rag/ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldID, id))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldIndex, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldContent, v))
}

// ContentHash applies equality check predicate on the "content_hash" field. It's identical to ContentHashEQ.
func ContentHash(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldContentHash, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldIndex, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContainsFold(FieldContent, v))
}

// ContentHashEQ applies the EQ predicate on the "content_hash" field.
func ContentHashEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEQ(FieldContentHash, v))
}

// ContentHashNEQ applies the NEQ predicate on the "content_hash" field.
func ContentHashNEQ(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNEQ(FieldContentHash, v))
}

// ContentHashIn applies the In predicate on the "content_hash" field.
func ContentHashIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldIn(FieldContentHash, vs...))
}

// ContentHashNotIn applies the NotIn predicate on the "content_hash" field.
func ContentHashNotIn(vs ...string) predicate.Chunk {
	return predicate.Chunk(sql.FieldNotIn(FieldContentHash, vs...))
}

// ContentHashGT applies the GT predicate on the "content_hash" field.
func ContentHashGT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGT(FieldContentHash, v))
}

// ContentHashGTE applies the GTE predicate on the "content_hash" field.
func ContentHashGTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldGTE(FieldContentHash, v))
}

// ContentHashLT applies the LT predicate on the "content_hash" field.
func ContentHashLT(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLT(FieldContentHash, v))
}

// ContentHashLTE applies the LTE predicate on the "content_hash" field.
func ContentHashLTE(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldLTE(FieldContentHash, v))
}

// ContentHashContains applies the Contains predicate on the "content_hash" field.
func ContentHashContains(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContains(FieldContentHash, v))
}

// ContentHashHasPrefix applies the HasPrefix predicate on the "content_hash" field.
func ContentHashHasPrefix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasPrefix(FieldContentHash, v))
}

// ContentHashHasSuffix applies the HasSuffix predicate on the "content_hash" field.
func ContentHashHasSuffix(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldHasSuffix(FieldContentHash, v))
}

// ContentHashIsNil applies the IsNil predicate on the "content_hash" field.
func ContentHashIsNil() predicate.Chunk {
	return predicate.Chunk(sql.FieldIsNull(FieldContentHash))
}

// ContentHashNotNil applies the NotNil predicate on the "content_hash" field.
func ContentHashNotNil() predicate.Chunk {
	return predicate.Chunk(sql.FieldNotNull(FieldContentHash))
}

// ContentHashEqualFold applies the EqualFold predicate on the "content_hash" field.
func ContentHashEqualFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldEqualFold(FieldContentHash, v))
}

// ContentHashContainsFold applies the ContainsFold predicate on the "content_hash" field.
func ContentHashContainsFold(v string) predicate.Chunk {
	return predicate.Chunk(sql.FieldContainsFold(FieldContentHash, v))
}

// HasDocument applies the HasEdge predicate on the "document" edge.
func HasDocument() predicate.Chunk {
	return predicate.Chunk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DocumentTable, DocumentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentWith applies the HasEdge predicate on the "document" edge with a given conditions (other predicates).
func HasDocumentWith(preds ...predicate.Document) predicate.Chunk {
	return predicate.Chunk(func(s *sql.Selector) {
		step := newDocumentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQueryResults applies the HasEdge predicate on the "query_results" edge.
func HasQueryResults() predicate.Chunk {
	return predicate.Chunk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, QueryResultsTable, QueryResultsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueryResultsWith applies the HasEdge predicate on the "query_results" edge with a given conditions (other predicates).
func HasQueryResultsWith(preds ...predicate.QueryResult) predicate.Chunk {
	return predicate.Chunk(func(s *sql.Selector) {
		step := newQueryResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chunk) predicate.Chunk {
	return predicate.Chunk(sql.NotPredicates(p))
}
