// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-rag/ent/ent/queryresult"
	"go-rag/ent/ent/userprompt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QueryResult is the model entity for the QueryResult schema.
type QueryResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// ContentSnippet holds the value of the "content_snippet" field.
	ContentSnippet string `json:"content_snippet,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueryResultQuery when eager-loading is set.
	Edges               QueryResultEdges `json:"edges"`
	user_prompt_results *int
	selectValues        sql.SelectValues
}

// QueryResultEdges holds the relations/edges for other nodes in the graph.
type QueryResultEdges struct {
	// Query holds the value of the query edge.
	Query *UserPrompt `json:"query,omitempty"`
	// Chunks holds the value of the chunks edge.
	Chunks []*Chunk `json:"chunks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QueryOrErr returns the Query value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueryResultEdges) QueryOrErr() (*UserPrompt, error) {
	if e.Query != nil {
		return e.Query, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: userprompt.Label}
	}
	return nil, &NotLoadedError{edge: "query"}
}

// ChunksOrErr returns the Chunks value or an error if the edge
// was not loaded in eager-loading.
func (e QueryResultEdges) ChunksOrErr() ([]*Chunk, error) {
	if e.loadedTypes[1] {
		return e.Chunks, nil
	}
	return nil, &NotLoadedError{edge: "chunks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QueryResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queryresult.FieldScore:
			values[i] = new(sql.NullFloat64)
		case queryresult.FieldID, queryresult.FieldRank:
			values[i] = new(sql.NullInt64)
		case queryresult.FieldContentSnippet:
			values[i] = new(sql.NullString)
		case queryresult.ForeignKeys[0]: // user_prompt_results
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QueryResult fields.
func (_m *QueryResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queryresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case queryresult.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				_m.Rank = int(value.Int64)
			}
		case queryresult.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				_m.Score = value.Float64
			}
		case queryresult.FieldContentSnippet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_snippet", values[i])
			} else if value.Valid {
				_m.ContentSnippet = value.String
			}
		case queryresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_prompt_results", value)
			} else if value.Valid {
				_m.user_prompt_results = new(int)
				*_m.user_prompt_results = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QueryResult.
// This includes values selected through modifiers, order, etc.
func (_m *QueryResult) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryQuery queries the "query" edge of the QueryResult entity.
func (_m *QueryResult) QueryQuery() *UserPromptQuery {
	return NewQueryResultClient(_m.config).QueryQuery(_m)
}

// QueryChunks queries the "chunks" edge of the QueryResult entity.
func (_m *QueryResult) QueryChunks() *ChunkQuery {
	return NewQueryResultClient(_m.config).QueryChunks(_m)
}

// Update returns a builder for updating this QueryResult.
// Note that you need to call QueryResult.Unwrap() before calling this method if this QueryResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *QueryResult) Update() *QueryResultUpdateOne {
	return NewQueryResultClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the QueryResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *QueryResult) Unwrap() *QueryResult {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: QueryResult is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *QueryResult) String() string {
	var builder strings.Builder
	builder.WriteString("QueryResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rank))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", _m.Score))
	builder.WriteString(", ")
	builder.WriteString("content_snippet=")
	builder.WriteString(_m.ContentSnippet)
	builder.WriteByte(')')
	return builder.String()
}

// QueryResults is a parsable slice of QueryResult.
type QueryResults []*QueryResult
